const db = require('../models');
const auth = require('../middlewares/auth');
const Web3 = require('web3');
const interfaceAbi = require('../contracts/Ballot.json');

exports.showString = async (req, res, next) => {
    
    console.log("debut de show yolo molo polo");
    //console.log(interfaceAbi);

    try {


        let userAccount = "";
        const web3 = new Web3(Web3.givenProvider || 'ws://localhost:8545');
        //console.log(web3);
        const Accounts = await web3.eth.getAccounts();
        let currentAccount = Accounts[0];
        //console.log(currentAccount);


        if ( await web3.eth.personal.unlockAccount(currentAccount, '0xe66e4eefe68ec77af900d78cd61d2e8b8e2b57a025aefe8bd55c652cee2c34b3', 600) ) {
            console.log(`${currentAccount} is unlocked`);
        }else{
            console.log(`unlock failed, ${currentAccount}`);
        }


        let myContract = await new web3.eth.Contract(interfaceAbi);
        // myContract.options.address = '0xb2Afd68F00b1446F7e86a18613Ad6cE8573B480a';

        myContract.deploy({
            data: '608060405234801561001057600080fd5b50604051610f0c380380610f0c8339810180604052602081101561003357600080fd5b81019080805164010000000081111561004b57600080fd5b8281019050602081018481111561006157600080fd5b815185602082028301116401000000008211171561007e57600080fd5b5050929190505050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060018060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555060008090505b81518110156101bb5760026040805190810160405280848481518110151561015857fe5b90602001906020020151815260200160008152509080600181540180825580915050906001820390600052602060002090600202016000909192909190915060008201518160000155602082015181600101555050508080600101915050610134565b5050610d40806101cc6000396000f3fe608060405260043610610093576000357c0100000000000000000000000000000000000000000000000000000000900480630121b93f14610098578063013cf08b146100d35780632e4176cf146101295780635c19a95c14610180578063609ff1bd146101d15780637d80c38e146101fc5780639e7b8d6114610253578063a3ec138d146102a4578063e2ba53f01461034e575b600080fd5b3480156100a457600080fd5b506100d1600480360360208110156100bb57600080fd5b8101908080359060200190929190505050610379565b005b3480156100df57600080fd5b5061010c600480360360208110156100f657600080fd5b810190808035906020019092919050505061051c565b604051808381526020018281526020019250505060405180910390f35b34801561013557600080fd5b5061013e61054f565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561018c57600080fd5b506101cf600480360360208110156101a357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610574565b005b3480156101dd57600080fd5b506101e661099a565b6040518082815260200191505060405180910390f35b34801561020857600080fd5b50610211610a15565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561025f57600080fd5b506102a26004803603602081101561027657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610a3e565b005b3480156102b057600080fd5b506102f3600480360360208110156102c757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610c88565b60405180858152602001841515151581526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200194505050505060405180910390f35b34801561035a57600080fd5b50610363610ce5565b6040518082815260200191505060405180910390f35b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000816000015414151515610439576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f486173206e6f20726967687420746f20766f746500000000000000000000000081525060200191505060405180910390fd5b8060010160009054906101000a900460ff161515156104c0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f416c726561647920766f7465642e00000000000000000000000000000000000081525060200191505060405180910390fd5b60018160010160006101000a81548160ff02191690831515021790555081816002018190555080600001546002838154811015156104fa57fe5b9060005260206000209060020201600101600082825401925050819055505050565b60028181548110151561052b57fe5b90600052602060002090600202016000915090508060000154908060010154905082565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060010160009054906101000a900460ff1615151561063e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f596f7520616c726561647920766f7465642e000000000000000000000000000081525060200191505060405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156106e2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f53656c662d64656c65676174696f6e20697320646973616c6c6f7765642e000081525060200191505060405180910390fd5b5b600073ffffffffffffffffffffffffffffffffffffffff16600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561088957600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691503373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515610884576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f466f756e64206c6f6f7020696e2064656c65676174696f6e2e0000000000000081525060200191505060405180910390fd5b6106e3565b60018160010160006101000a81548160ff021916908315150217905550818160010160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060010160009054906101000a900460ff161561097e5781600001546002826002015481548110151561095b57fe5b906000526020600020906002020160010160008282540192505081905550610995565b816000015481600001600082825401925050819055505b505050565b6000806000905060008090505b600280549050811015610a1057816002828154811015156109c457fe5b9060005260206000209060020201600101541115610a03576002818154811015156109eb57fe5b90600052602060002090600202016001015491508092505b80806001019150506109a7565b505090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610b28576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260288152602001807f4f6e6c79206368616972706572736f6e2063616e20676976652072696768742081526020017f746f20766f74652e00000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900460ff16151515610bed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f54686520766f74657220616c726561647920766f7465642e000000000000000081525060200191505060405180910390fd5b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154141515610c3e57600080fd5b60018060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555050565b60016020528060005260406000206000915090508060000154908060010160009054906101000a900460ff16908060010160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154905084565b60006002610cf161099a565b815481101515610cfd57fe5b90600052602060002090600202016000015490509056fea165627a7a72305820ed8f794f4fa178acf6b5a026be39d379844870cbf2a43e85e40d09c610eda21d0029',
            arguments: ['0x0', '0x01']
        }) 
        .send({
            from: currentAccount,
        })
        .then((newContractInstance) => {
            console.log(newContractInstance.options.address) // instance with the new contract address
        });
        
        //console.log(myContract);

        // if(myContract) {
            
        //     setTimeout(async () => {
        //         console.log("call de proposals"); // passing !
        //         const names = await myContract.methods.proposals(1).call();
        //         console.log(names);
        //       }, 5000);

        //     setTimeout(async () => {
        //         console.log("call de getChairperson"); // passing !
        //         account = await web3.eth.accounts.privateKeyToAccount('0xe66e4eefe68ec77af900d78cd61d2e8b8e2b57a025aefe8bd55c652cee2c34b3');
        //         const Person = await myContract.methods.chairperson.call();
        //         console.log(Person);
        //         console.log(account.privateKey);
        //       }, 5000);

        //     setTimeout(async () => {
                
        //         console.log("call de give right to vote"); // current tx reverted by evm..
        //         const right = await myContract.methods.giveRightToVote('0xb0aea62f453cb9a3200328bcbfbbe2fa95fa36a4').send({from: currentAccount});
        //         console.log(right);
        //     }, 5000);
        // }
        
        


        const { id } = req.decoded;
        console.log("entrée dans le try de get string , id du user : " + id);
          
        // monggo call
        const user = await db.User.findById(id);


        let Stringladeen = {gestrin: "ZEBEBEBEBEBE"};
        
        res.status(200);
        res.json(Stringladeen);

    } catch (err) {

        err.status = 400;
        next(err);

    }
    

}


