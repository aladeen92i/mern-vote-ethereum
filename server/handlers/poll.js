const db = require('../models');
const Web3 = require('web3');
const interfaceAbi = require('../contracts/Ballot.json');
const bytecode = '';

exports.showPolls = async (req, res, next) => {
    try {
        const polls = await db.Poll.find().populate('user', ['username', 'id']);

        res.status(200).json(polls);
    } catch (err) {
        err.status = 400;
        next(err);
    }
}

////// POLL FOR A SPECIFIC USERr

exports.usersPolls = async(req, res, next) => {
    try {
        const { id } = req.decoded;
        console.log(id);
        const user = await db.User.findById(id).populate('polls');
        res.status(200).json(user.polls);

    } catch(err) {
        err.status = 400;
        console.log("error users polls");
        return next({status: 400, message: err.message});
    }
}

////// POLL CREATE FUNCTION FOR MONGO

exports.createPoll = async (req, res, next) => {
    try {
        const web3 = new Web3(Web3.givenProvider || 'ws://localhost:8545');
        const { id } = req.decoded;
        console.log("id du user :", id);
        const user = await db.User.findById(id);
        const { question, options, voters } = req.body;
        console.log("debut du déploiement de contrat + poll sur mongo db, args :", question, options, voters);
        let listOpt = options.map(option => ({ option, votes: 0 }));
        let optTab = [];

        for(let i = 0; i < listOpt.length; i++){
            optTab[i] = web3.utils.asciiToHex(listOpt[i].option);
        }

        let currentAccount = user.ethAddress;

        if ( await web3.eth.personal.unlockAccount(currentAccount, '0x38bfe6f3f3d6c11c1c1fe248520f98d066520e08c83273180b53d4faa00adb5f', 600) ) {
            console.log(`${currentAccount} is unlocked`);
        }else{
            console.log(`unlock failed, ${currentAccount}`);
        }
        
        let myContract = await new web3.eth.Contract(interfaceAbi);
        myContract.options.data = bytecode;

        for(let i = 0; i < voters.length; i++){

            if(web3.utils.isAddress(voters[i])){
                console.log("ceci est bien une adresse ethereum :", voters[i]);
            }else{
                console.log("invalid eth address");
            }
        }
        await myContract.deploy({
            arguments: [req.body.question, optTab, voters]
        })
        .send({
            from: currentAccount,
            gas: 150000000
        }, (error, transactionHash) => {   
                })
        .on('error', (error) => {
            //console.log(".ON ERROR", error); 
            //next(error);
        })
        .on('transactionHash', (transactionHash) => {
            console.log(".ON TRANSACTION HASH nothing done here");
        })
        .on('receipt', (receipt) => {
            console.log(".ON RECEIPT new Address should be retrieved here");
            console.log(receipt.contractAddress); // contains the new contract address
        })
        .on('confirmation', (confirmationNumber, receipt) => {
            console.log(".ON confNumber");
            console.log(confirmationNumber);
        })
        .then((newContractInstance) => {
            console.log(newContractInstance.options.address); // instance with the new contract address
            console.log("CONTRAT INSTANCIE A L ADRESSE CI DESSUS");
            console.log("fin du délire");
            setTimeout(async () => {
                let poll = await db.Poll.create({
                    user,
                    question,
                    options: options.map(option => ({ option, votes: 0 })),
                    voters: voters,
                    contractAddress: newContractInstance.options.address,
                    chairpersonAdress: currentAccount
                });
                // for(let i = 0; i < voters.length; i++){
                    
                // }
                await user.polls.push(poll._id);
                await user.save();
            }, 5000);
            res.status(201).json({...poll._doc, user: user._id});
        });
    } catch (err) {
        next(err);
    }
}


exports.getPoll = async (req, res, next) => {

    try {
        const {id} = req.params;
        console.log(id);
        const poll = await db.Poll.findById(id).populate('user', ['username', 'id']);
        console.log(poll);
        if(!poll) throw new Error('No poll found');
        res.status(200).json(poll);
    } catch (err) {
        err.status = 400;
        next(err);
    }
}

exports.deletePoll = async (req, res, next) => {
    try {
        const {id: pollId} = req.params;
        const {id: userId} = req.decoded;
        const poll = await db.Poll.findById(pollId);

        if(!poll) throw new Error('No poll found');

        if(poll.user.toString() !== userId) {
            throw new Error('Unauthorized access');
        }

        await poll.remove();
        res.status(200).json(poll);
        
    } catch (err) {
        err.status = 400;
        next(err);
    }
}

exports.vote = async (req, res, next) => {
    try {

        const {id: pollId} = req.params;
        const {id: userId} = req.decoded;
        const {answer} = req.body;

        if(answer) {

            const poll = await db.Poll.findById(pollId);
            if(!poll) throw new Error('No poll found'); 

            const vote = poll.options.map(
                option => {
                    if(option.option == answer) {
                        return {
                            option: option.option,
                            id: option._id,
                            votes: option.votes + 1
                        };
                    } else {
                        return option;
                    }
                }
            );

            if(poll.voted.filter(user => user.toString() === userId).length <= 0) {
                    poll.voted.push(userId);
                    poll.options = vote;
                    await poll.save();
                    res.status(202).json(poll);
                } else {
                    throw new Error('Already voted');
                }
        } else {
            throw new Error('No answer');
        }
    } catch(err) {
        err.status = 400;
        next(err);
    }
}