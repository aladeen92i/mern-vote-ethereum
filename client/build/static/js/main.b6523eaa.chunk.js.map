{"version":3,"sources":["registerServiceWorker.js","store/reducers/auth.js","store/reducers/index.js","store/reducers/error.js","store/actionTypes.js","store/reducers/polls.js","store/index.js","store/actions/error.js","services/api.js","store/actions/auth.js","store/actions/polls.js","components/Auth.jsx","components/ErrorMessage.jsx","pages/AuthPage.jsx","components/Poll.jsx","services/color.js","components/Polls.jsx","components/CreatePoll.jsx","pages/TestPage.jsx","pages/Homepage.jsx","pages/PollPage.jsx","pages/CreatePollPage.jsx","containers/RouteViews.jsx","containers/NavBar.jsx","containers/App.jsx","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","DEFAULT_STATE","isAuthenticated","user","combineReducers","arguments","length","undefined","message","action","type","Object","objectSpread","auth","keys","polls","currentPoll","poll","store","createStore","rootReducer","compose","applyMiddleware","thunk","addError","api","setToken","token","axios","defaults","headers","common","concat","call","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","method","path","data","response","wrap","_context","prev","next","sent","abrupt","stop","_x","_x2","_x3","apply","this","setCurrentUser","logout","dispatch","localStorage","clear","setPolls","setCurrentPoll","Auth","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","username","password","ethAddress","handleChange","bind","assertThisInitialized","handleSubmit","e","setState","defineProperty","target","name","value","_this$state","email","authType","preventDefault","authUser","ethInput","ethLabel","cardActions","_this$state2","react_default","createElement","Input","onChange","autoComplete","className","Label","htmlFor","Link","to","Container","Card","body","inverse","style","backgroundColor","borderColor","CardTitle","Form","onSubmit","Row","Col","sm","size","offset","md","xl","xs","lg","id","Button","Component","connect","_ref2","objectWithoutProperties","setItem","t0","react","AuthPage","Redirect","components_ErrorMessage","components_Auth","withRouter","vote","_ref6","_callee6","_context6","_x6","deletePoll","_ref7","_callee7","_context7","_x7","answers","options","map","option","onClick","_id","answer","key","pollData","labels","datasets","label","question","Math","random","toString","slice","votes","defaultFontColor","react_chartjs_2_es","Polls","sorted","page","pageSize","expanded","resized","filtered","handleSelect","getSlicedPolls","history","push","_this2","_this$props","getPolls","getUserPolls","Table","_ref3","_callee3","_context3","_callee2","slicedPolls","_context2","CreatePoll","voters","addAnswer","handleAnswer","handleVoter","addVoter","toConsumableArray","index","createPoll","i","voter","_ref4","_callee4","_context4","_x4","jwtToken","decode","err","es","components_CreatePoll","components_Polls","components_Poll","Homepage","PollPage","getPoll","params","CreatePollPage","getCurrentPoll","_ref5","_callee5","_context5","_x5","Switch","Route","exact","render","pages_Homepage","pages_AuthPage","pages_CreatePollPage","pages_PollPage","assign","TestPage","NavBar","toggle","isOpen","Navbar","NavItem","React","App","BrowserRouter","containers_NavBar","containers_RouteViews","containers_App","document","getElementById","URL","process","origin","addEventListener","fetch","status","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"6HAUMA,SAAcC,QACa,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,4DAsCN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,2CAMrBC,MAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,0DC7E7DC,EAAgB,CAClBC,iBAAiB,EACjBC,KAAM,YCEKC,cAAgB,CAC3BJ,MCLW,WAAqC,IAApCL,EAAoCU,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAA5B,CAACG,QAAS,MAAOC,EAAWJ,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAEhD,OAAOE,EAAOC,MAEV,ICNiB,YDQb,OADAb,QAAQC,IAAIW,EAAOT,OACZW,OAAAC,EAAA,EAAAD,CAAA,GAAIhB,EAAX,CAAkBa,QAASC,EAAOT,QAEtC,ICToB,eDUhB,OAAOW,OAAAC,EAAA,EAAAD,CAAA,GAAIhB,EAAX,CAAkBa,QAAS,OAE/B,QACI,OAAOb,IDNfkB,KDDW,WAAmC,IAAlClB,EAAkCU,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAA1BJ,EAAeQ,EAAWJ,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAC9C,OAAOE,EAAOC,MACV,IGNwB,mBHOpB,MAAO,CACHR,kBAAmBS,OAAOG,KAAKL,EAAON,MAAMG,OAC5CH,KAAMM,EAAON,MAGrB,QACI,OAAOR,ICPfoB,MGPiB,WAAwB,IAAvBpB,EAAuBU,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAf,GAAII,EAAWJ,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACzC,OAAOE,EAAOC,MACV,IDCiB,YCAb,OAAOD,EAAOM,MAElB,QACI,OAAOpB,IHEfqB,YGEuB,WAAwB,IAAvBrB,EAAuBU,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAf,GAAII,EAAWJ,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAC/C,OAAOE,EAAOC,MAEV,IDTwB,mBCUpB,OAAOD,EAAOQ,KAElB,QACI,OAAOtB,MCXNuB,EAAQC,YACjBC,EALkB,CAClBpB,MAAO,CAACQ,QAAS,OAMjBa,YAAQC,YAAgBC,uCCTfC,EAAW,SAAAxB,GAAK,MAAK,CAC9BU,KHHqB,YGIrBV,2BCaWyB,EAAA,CAAEC,SAbO,SAAAC,GAClBA,EACFC,IAAMC,SAASC,QAAQC,OAAvB,wBAAAC,OAA2DL,UAEpDC,IAAMC,SAASC,QAAQC,OAAvB,eASgBE,KALV,eAAAC,EAAAvB,OAAAwB,EAAA,EAAAxB,CAAAyB,EAAAC,EAAAC,KAAG,SAAAC,EAAOC,EAAQC,EAAMC,GAArB,IAAAC,EAAA,OAAAP,EAAAC,EAAAO,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACKnB,IAAMY,GAAN,GAAAR,OAXZ,4BAWY,KAAAA,OAAyBS,GAAQC,GADtC,cACZC,EADYE,EAAAG,KAAAH,EAAAI,OAAA,SAEXN,EAASD,MAFE,wBAAAG,EAAAK,SAAAX,MAAH,gBAAAY,EAAAC,EAAAC,GAAA,OAAAnB,EAAAoB,MAAAC,KAAAlD,YAAA,ICRJmD,EAAiB,SAAArD,GAAI,MAAK,CACnCO,KLF4B,mBKG5BP,SAGSuB,EAAW,SAAAC,GACpBF,EAAIC,SAASC,IAGJ8B,EAAS,WAClB,OAAO,SAAAC,GACHC,aAAaC,QACbnC,EAAIC,SAAS,MACbgC,EAASF,EAAe,KACxBE,EFX0B,CAC9BhD,KHPwB,mBMIfmD,EAAW,SAAA9C,GAAK,MAAK,CAC9BL,KNDqB,YMErBK,UAGS+C,EAAiB,SAAA7C,GAAI,MAAK,CACnCP,KNL4B,mBMM5BO,8LCLE8C,cACJ,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAtD,OAAAuD,EAAA,EAAAvD,CAAA4C,KAAAQ,IACjBE,EAAAtD,OAAAwD,EAAA,EAAAxD,CAAA4C,KAAA5C,OAAAyD,EAAA,EAAAzD,CAAAoD,GAAA9B,KAAAsB,KAAMS,KACDrE,MAAQ,CACX0E,SAAU,GACVC,SAAU,GACVC,WAAY,IAEdN,EAAKO,aAAeP,EAAKO,aAAaC,KAAlB9D,OAAA+D,EAAA,EAAA/D,QAAA+D,EAAA,EAAA/D,CAAAsD,KACpBA,EAAKU,aAAeV,EAAKU,aAAaF,KAAlB9D,OAAA+D,EAAA,EAAA/D,QAAA+D,EAAA,EAAA/D,CAAAsD,KARHA,4EAUNW,GACXrB,KAAKsB,SAALlE,OAAAmE,EAAA,EAAAnE,CAAA,GAAiBiE,EAAEG,OAAOC,KAAOJ,EAAEG,OAAOE,6CAE/BL,GAAG,IAAAM,EACoC3B,KAAK5D,MAA/C0E,EADMa,EACNb,SAAUC,EADJY,EACIZ,SAAUC,EADdW,EACcX,WAAYY,EAD1BD,EAC0BC,MAChCC,EAAa7B,KAAKS,MAAlBoB,SACRR,EAAES,iBACF9B,KAAKS,MAAMsB,SAASF,GAAY,QAAS,CAAEf,WAAUC,WAAUC,aAAYY,wFAQpE,IAGHI,EACAC,EACAC,EALGC,EACoCnC,KAAK5D,MAAxC0E,EADDqB,EACCrB,SAAUC,EADXoB,EACWpB,SAAUC,EADrBmB,EACqBnB,WACpBa,EAAa7B,KAAKS,MAAlBoB,SAsBR,MAjBiB,aAAbA,GACFG,EAAWI,EAAAtD,EAAAuD,cAACC,EAAA,EAAD,CACGnF,KAAK,OACLuE,MAAOV,EACPS,KAAK,aACLc,SAAUvC,KAAKiB,aACfuB,aAAa,MACbC,UAAU,wBAExBR,EAAUG,EAAAtD,EAAAuD,cAACK,EAAA,EAAD,CAAOD,UAAU,aAAaE,QAAQ,cAAtC,cACgB,KAE1BT,EAAcE,EAAAtD,EAAAuD,cAACO,EAAA,EAAD,CAAMH,UAAU,GAAGI,GAAG,UAAtB,aAEdb,EAAW,KACXE,EAAcE,EAAAtD,EAAAuD,cAACO,EAAA,EAAD,CAAMH,UAAU,GAAGI,GAAG,aAAtB,eAIVT,EAAAtD,EAAAuD,cAACS,EAAA,EAAD,KACEV,EAAAtD,EAAAuD,cAAA,OAAKI,UAAU,YACfL,EAAAtD,EAAAuD,cAACU,EAAA,EAAD,CAAMC,MAAI,EAACC,SAAO,EAACC,MAAO,CAAEC,gBAAiB,OAAQC,YAAa,SAChEhB,EAAAtD,EAAAuD,cAACgB,EAAA,EAAD,KAAYxB,GACZO,EAAAtD,EAAAuD,cAACiB,EAAA,EAAD,CAAMC,SAAUvD,KAAKoB,cACrBgB,EAAAtD,EAAAuD,cAACmB,EAAA,EAAD,KACEpB,EAAAtD,EAAAuD,cAACoB,EAAA,EAAD,CAAKC,GAAI,CAAEC,KAAM,IAAKC,OAAQ,GAAKC,GAAI,CAAEF,KAAM,IAAKC,OAAQ,GAAKE,GAAI,CAAEH,KAAM,IAAKC,OAAQ,GAAKG,GAAI,CAAEJ,KAAM,IAAKC,OAAQ,GAAKI,GAAI,CAAEL,KAAM,IAAKC,OAAQ,IAChJxB,EAAAtD,EAAAuD,cAACC,EAAA,EAAD,CAAO2B,GAAG,WAAW9G,KAAK,OAAOuE,MAAOZ,EAAUW,KAAK,WAAWc,SAAUvC,KAAKiB,aAAcuB,aAAa,MAAMC,UAAU,wBAC5HL,EAAAtD,EAAAuD,cAACK,EAAA,EAAD,CAAOC,QAAQ,YAAf,cAGNP,EAAAtD,EAAAuD,cAACmB,EAAA,EAAD,KACEpB,EAAAtD,EAAAuD,cAACoB,EAAA,EAAD,CAAKC,GAAI,CAAEC,KAAM,IAAKC,OAAQ,IAC1BxB,EAAAtD,EAAAuD,cAACC,EAAA,EAAD,CAAO2B,GAAG,WAAW9G,KAAK,WAAWuE,MAAOX,EAAUU,KAAK,WAAWc,SAAUvC,KAAKiB,aAAcwB,UAAU,yBAC7GL,EAAAtD,EAAAuD,cAACK,EAAA,EAAD,CAAOC,QAAQ,YAAf,cAINP,EAAAtD,EAAAuD,cAACoB,EAAA,EAAD,CAAKC,GAAI,CAAEC,KAAM,IAAKC,OAAQ,IACrB5B,EAAYC,GAErBG,EAAAtD,EAAAuD,cAACoB,EAAA,EAAD,CAAKC,GAAI,CAAEC,KAAM,IAAKC,OAAQ,IACxBxB,EAAAtD,EAAAuD,cAAC6B,EAAA,EAAD,CAAQzB,UAAU,SAAStF,KAAK,UAAhC,UAGNiF,EAAAtD,EAAAuD,cAACO,EAAA,EAAD,CAAMH,UAAU,GAAGI,GAAG,aAAtB,qBAJA,IAI6DX,aA7E1DiC,aAuFJC,cAAQ,iBAAO,IAAK,CAAErC,SFxEb,SAAC7C,EAAMC,GAC3B,sBAAAR,EAAAvB,OAAAwB,EAAA,EAAAxB,CAAAyB,EAAAC,EAAAC,KAAO,SAAAC,EAAMmB,GAAN,IAAAkE,EAAAjG,EAAAxB,EAAAH,EAAA,OAAAoC,EAAAC,EAAAO,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAEgCtB,EAAIQ,KAAK,OAAT,QAAAD,OAAyBS,GAAQC,GAFjE,OAAAkF,EAAA/E,EAAAG,KAEQrB,EAFRiG,EAEQjG,MAAUxB,EAFlBQ,OAAAkH,EAAA,EAAAlH,CAAAiH,EAAA,WAGCjE,aAAamE,QAAQ,WAAYnG,GACjCF,EAAIC,SAASC,GACb+B,EAASF,EAAerD,IACxBuD,EFtBsB,CAC9BhD,KHPwB,iBKsBjBmC,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAkF,GAAAlF,EAAA,SASO7C,EAAQ6C,EAAAkF,GAAIpF,SAASD,KAC3BgB,EAASlC,EAASxB,EAAMQ,UAVzB,yBAAAqC,EAAAK,SAAAX,EAAA,kBAAP,gBAAAY,GAAA,OAAAjB,EAAAoB,MAAAC,KAAAlD,YAAA,IEuE2CoD,UAAhCkE,CAA0C5D,GCvF1C4D,eAAQ,SAAAzG,GAAK,MAAK,CAAElB,MAAOkB,EAAMlB,QAAjC2H,CAJM,SAAAzF,GAAA,IAAGlC,EAAHkC,EAAGlC,MAAH,OACjB2F,EAAAtD,EAAAuD,cAACoC,EAAA,SAAD,SAAahI,EAAMQ,SAAWmF,EAAAtD,EAAAuD,cAAA,OAAKI,UAAU,SAAUhG,EAAMQ,SAA7D,OCeWyH,GAdE,SAAA/F,GAAmC,IAAhCkD,EAAgClD,EAAhCkD,SAEhB,OAFgDlD,EAAtBhC,gBAECyF,EAAAtD,EAAAuD,cAACsC,EAAA,EAAD,CAAU9B,GAAG,MAKpCT,EAAAtD,EAAAuD,cAAA,WACID,EAAAtD,EAAAuD,cAACuC,GAAD,MACAxC,EAAAtD,EAAAuD,cAACwC,EAAD,CAAMhD,SAAUA,eC2DbiD,eAAWV,YACxB,SAAAzG,GAAK,MAAK,CACRD,KAAMC,EAAMF,cAEd,CAAEsH,KJgBgB,SAAC7F,EAAMC,GACvB,sBAAA6F,EAAA5H,OAAAwB,EAAA,EAAAxB,CAAAyB,EAAAC,EAAAC,KAAO,SAAAkG,EAAM9E,GAAN,IAAAzC,EAAAjB,EAAA,OAAAoC,EAAAC,EAAAO,KAAA,SAAA6F,GAAA,cAAAA,EAAA3F,KAAA2F,EAAA1F,MAAA,cAAA0F,EAAA3F,KAAA,EAAA2F,EAAA1F,KAAA,EAEoBtB,EAAIQ,KAAK,OAAT,SAAAD,OAA0BS,GAAQC,GAFtD,OAEOzB,EAFPwH,EAAAzF,KAGCU,EAASI,EAAe7C,IACxByC,EH3FsB,CAC9BhD,KHPwB,iBM6FjB+H,EAAA1F,KAAA,gBAAA0F,EAAA3F,KAAA,EAAA2F,EAAAV,GAAAU,EAAA,SAMOzI,EAAQyI,EAAAV,GAAIpF,SAASD,KAC3BgB,EAASlC,EAASxB,EAAMQ,UAPzB,yBAAAiI,EAAAvF,SAAAsF,EAAA,iBAAP,gBAAAE,GAAA,OAAAH,EAAAjF,MAAAC,KAAAlD,YAAA,IIjBMsI,WJ6BgB,SAACnB,GACvB,sBAAAoB,EAAAjI,OAAAwB,EAAA,EAAAxB,CAAAyB,EAAAC,EAAAC,KAAO,SAAAuG,EAAMnF,GAAN,IAAAzC,EAAAjB,EAAA,OAAAoC,EAAAC,EAAAO,KAAA,SAAAkG,GAAA,cAAAA,EAAAhG,KAAAgG,EAAA/F,MAAA,cAAA+F,EAAAhG,KAAA,EAAAgG,EAAA/F,KAAA,EAEoBtB,EAAIQ,KAAK,SAAT,SAAAD,OAA4BwF,IAFhD,OAEOvG,EAFP6H,EAAA9F,KAGCU,EAASI,EAAe7C,IACxByC,EHxGsB,CAC9BhD,KHPwB,iBM0GjBoI,EAAA/F,KAAA,gBAAA+F,EAAAhG,KAAA,EAAAgG,EAAAf,GAAAe,EAAA,SAOO9I,EAAQ8I,EAAAf,GAAIpF,SAASD,KAC3BgB,EAASlC,EAASxB,EAAMQ,UARzB,yBAAAsI,EAAA5F,SAAA2F,EAAA,iBAAP,gBAAAE,GAAA,OAAAH,EAAAtF,MAAAC,KAAAlD,YAAA,KIlCsBsH,CAjEb,SAAAzF,GAAgC,IAA7BjB,EAA6BiB,EAA7BjB,KAAMqH,EAAuBpG,EAAvBoG,KAAMK,EAAiBzG,EAAjByG,WAEpBK,EACJ/H,EAAKgI,SACLhI,EAAKgI,QAAQC,IAAI,SAAAC,GAAM,OACrBxD,EAAAtD,EAAAuD,cAAA,UACEwD,QAAS,kBAAMd,EAAKrH,EAAKoI,IAAK,CAAEC,OAAQH,EAAOA,UAC/CnD,UAAU,SACVuD,IAAKJ,EAAOE,KACXF,EAAOA,UAIRK,EAAWvI,EAAKgI,SAAW,CAC/BQ,OAAQxI,EAAKgI,QAAQC,IAAI,SAAAC,GAAM,OAAIA,EAAOA,SAC1CO,SAAU,CACR,CACEC,MAAO1I,EAAK2I,SACZlD,gBAAiBzF,EAAKgI,QAAQC,IAAI,SAAAC,GAAM,MCxB1C,IACAU,KAAKC,SACFC,SAAS,IACTC,MAAM,EAAG,KDsBVrD,YAAa,UACbjE,KAAMzB,EAAKgI,QAAQC,IAAI,SAAAC,GAAM,OAAIA,EAAOc,QACxCC,iBAAkB,aAWxB,OACEvE,EAAAtD,EAAAuD,cAAA,OAAKI,UAAU,OACbL,EAAAtD,EAAAuD,cAAA,OAAKI,UAAU,aACbL,EAAAtD,EAAAuD,cAAA,OAAKI,UAAU,aACbL,EAAAtD,EAAAuD,cAAA,OAAKI,UAAU,2BACbL,EAAAtD,EAAAuD,cAAA,OAAKI,UAAU,2BACbL,EAAAtD,EAAAuD,cAAA,QAAMI,UAAU,cAAc/E,EAAK2I,UACnCjE,EAAAtD,EAAAuD,cAAA,2CAEJD,EAAAtD,EAAAuD,cAAA,OAAKI,UAAU,eACbL,EAAAtD,EAAAuD,cAAA,UACED,EAAAtD,EAAAuD,cAAA,UAAKoD,GACLrD,EAAAtD,EAAAuD,cAAA,UAAID,EAAAtD,EAAAuD,cAAA,UAAQI,UAAU,SAASoD,QAAS,kBAAMT,EAAW1H,EAAKoI,OAA1D,oBAKR1D,EAAAtD,EAAAuD,cAAA,OAAKI,UAAU,aACbL,EAAAtD,EAAAuD,cAAA,OAAKI,UAAU,aACbL,EAAAtD,EAAAuD,cAAA,OAAKI,UAAU,4BACbL,EAAAtD,EAAAuD,cAAA,OAAKI,UAAU,gBACfL,EAAAtD,EAAAuD,cAAA,QAAMI,UAAU,cAAhB,SACAL,EAAAtD,EAAAuD,cAAA,sCACI3E,EAAKgI,SAAWtD,EAAAtD,EAAAuD,cAACuE,GAAA,EAAD,CAAKzH,KAAM8G,uBErDzCY,8BACJ,SAAAA,EAAYpG,GAAO,IAAAC,EAAA,OAAAtD,OAAAuD,EAAA,EAAAvD,CAAA4C,KAAA6G,IACjBnG,EAAAtD,OAAAwD,EAAA,EAAAxD,CAAA4C,KAAA5C,OAAAyD,EAAA,EAAAzD,CAAAyJ,GAAAnI,KAAAsB,KAAMS,KACDrE,MAAQ,CACb0K,OAAQ,GACRC,KAAM,EACNC,SAAU,GACVC,SAAU,GACVC,QAAS,GACTC,SAAU,IACVzG,EAAK0G,aAAe1G,EAAK0G,aAAalG,KAAlB9D,OAAA+D,EAAA,EAAA/D,QAAA+D,EAAA,EAAA/D,CAAAsD,KATHA,oFAcjB2G,EAD2BrH,KAAKS,MAAxB4G,uDAIGpD,GACSjE,KAAKS,MAAjB6G,QACAC,KAAR,UAAA9I,OAAuBwF,qCAGhB,IAAAuD,EAAAxH,KAAAyH,EACkDzH,KAAKS,MAA9BnD,GADzBmK,EACCC,SADDD,EACWE,aADXF,EACyBnK,MAE1BE,GAHCiK,EAC+BJ,eAExBrH,KAAKS,MAAMjD,MAAMmI,IAAI,SAACjI,GAADZ,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,UAEjCsF,EAAAtD,EAAAuD,cAACoC,EAAA,SAAD,CAAUuB,IAAKtI,EAAKoI,KAClB1D,EAAAtD,EAAAuD,cAAA,MAAII,UAAU,IACZL,EAAAtD,EAAAuD,cAAA,UAAK3E,EAAK2I,UACVjE,EAAAtD,EAAAuD,cAAA,oCACAD,EAAAtD,EAAAuD,cAAA,oCACAD,EAAAtD,EAAAuD,cAAA,8BACAD,EAAAtD,EAAAuD,cAAA,sCACAD,EAAAtD,EAAAuD,cAAA,UAAID,EAAAtD,EAAAuD,cAAA,UAAQI,UAAU,qCAAqCoD,QAAS,kBAAM2B,EAAKJ,aAAa1J,EAAKoI,OAAO1D,EAAAtD,EAAAuD,cAAA,KAAGI,UAAU,kBAAb,eAK9G,OADAnG,QAAQC,MAGN6F,EAAAtD,EAAAuD,cAACoC,EAAA,SAAD,KAEGnH,EAAKX,iBACJyF,EAAAtD,EAAAuD,cAAA,OAAKI,UAAU,aA4CfL,EAAAtD,EAAAuD,cAAA,OAAKI,UAAU,YACXL,EAAAtD,EAAAuD,cAAA,OAAKI,UAAU,OACbL,EAAAtD,EAAAuD,cAACO,EAAA,EAAD,CAAMH,UAAU,iEAAiEI,GAAG,aAApF,aAEFT,EAAAtD,EAAAuD,cAAA,OAAKI,UAAU,aAGrBL,EAAAtD,EAAAuD,cAAA,WACO/E,EAAKX,iBACJyF,EAAAtD,EAAAuD,cAAA,OAAKI,UAAU,uBACHL,EAAAtD,EAAAuD,cAACuF,GAAA,EAAD,CAAOnF,UAAU,uCACfL,EAAAtD,EAAAuD,cAAA,aACED,EAAAtD,EAAAuD,cAAA,UACED,EAAAtD,EAAAuD,cAAA,oBACAD,EAAAtD,EAAAuD,cAAA,2BACAD,EAAAtD,EAAAuD,cAAA,2BACAD,EAAAtD,EAAAuD,cAAA,uBACAD,EAAAtD,EAAAuD,cAAA,+BAGJD,EAAAtD,EAAAuD,cAAA,aAAQ7E,MAKtBF,EAAKX,iBACLyF,EAAAtD,EAAAuD,cAAA,MAAII,UAAU,iBACVL,EAAAtD,EAAAuD,cAAA,UAAID,EAAAtD,EAAAuD,cAACO,EAAA,EAAD,CAAMH,UAAU,iDAAiDI,GAAG,aAApE,aACJT,EAAAtD,EAAAuD,cAAA,UAAID,EAAAtD,EAAAuD,cAACO,EAAA,EAAD,CAAMH,UAAU,+EAA+EI,GAAG,UAAlG,mBArHJsB,cA8HLC,eAAQ,SAAAzG,GAAK,MAAK,CAC7BL,KAAMK,EAAML,KACZE,MAAOG,EAAMH,QAEf,CAAEkK,SN7HoB,WACpB,sBAAA/I,EAAAvB,OAAAwB,EAAA,EAAAxB,CAAAyB,EAAAC,EAAAC,KAAO,SAAAC,EAAMmB,GAAN,IAAA3C,EAAAf,EAAA,OAAAoC,EAAAC,EAAAO,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAEqBtB,EAAIQ,KAAK,MAAO,SAFrC,OAEOlB,EAFP8B,EAAAG,KAGCU,EAASG,EAAS9C,IAClB2C,EHbsB,CAC9BhD,KHPwB,iBMejBmC,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAkF,GAAAlF,EAAA,SAMO7C,EAAQ6C,EAAAkF,GAAIpF,SAASD,KAC3BgB,EAASlC,EAASxB,EAAMQ,UAPzB,yBAAAqC,EAAAK,SAAAX,EAAA,iBAAP,gBAAAY,GAAA,OAAAjB,EAAAoB,MAAAC,KAAAlD,YAAA,IM4HU6K,aNtFc,WACxB,sBAAAE,EAAAzK,OAAAwB,EAAA,EAAAxB,CAAAyB,EAAAC,EAAAC,KAAO,SAAA+I,EAAM3H,GAAN,IAAA3C,EAAAf,EAAA,OAAAoC,EAAAC,EAAAO,KAAA,SAAA0I,GAAA,cAAAA,EAAAxI,KAAAwI,EAAAvI,MAAA,cAAAuI,EAAAxI,KAAA,EAAAwI,EAAAvI,KAAA,EAEqBtB,EAAIQ,KAAK,MAAO,cAFrC,OAEOlB,EAFPuK,EAAAtI,KAGCU,EAASG,EAAS9C,IAClB2C,EHpDsB,CAC9BhD,KHPwB,iBMsDjB4K,EAAAvI,KAAA,gBAAAuI,EAAAxI,KAAA,EAAAwI,EAAAvD,GAAAuD,EAAA,SAMOtL,EAAQsL,EAAAvD,GAAIpF,SAASD,KAC3BgB,EAASlC,EAASxB,EAAMQ,UAPzB,yBAAA8K,EAAApI,SAAAmI,EAAA,iBAAP,gBAAAhI,GAAA,OAAA+H,EAAA9H,MAAAC,KAAAlD,YAAA,IMqFwBuK,eNhHE,WAC1B,sBAAAhD,EAAAjH,OAAAwB,EAAA,EAAAxB,CAAAyB,EAAAC,EAAAC,KAAO,SAAAiJ,EAAM7H,GAAN,IAAA3C,EAAAyK,EAAAxL,EAAA,OAAAoC,EAAAC,EAAAO,KAAA,SAAA6I,GAAA,cAAAA,EAAA3I,KAAA2I,EAAA1I,MAAA,cAAA0I,EAAA3I,KAAA,EAAA2I,EAAA1I,KAAA,EAEqBtB,EAAIQ,KAAK,MAAO,SAFrC,OAEOlB,EAFP0K,EAAAzI,KAGCnD,QAAQC,IAAI,iCAAmCiB,EAAMT,QAC/CkL,EAAczK,EAAMiJ,MAAOjJ,EAAMT,OAAS,EAAGS,EAAMT,QACzDoD,EAASG,EAAS2H,IAClB9H,EH5BsB,CAC9BhD,KHPwB,iBM4BjB+K,EAAA1I,KAAA,iBAAA0I,EAAA3I,KAAA,GAAA2I,EAAA1D,GAAA0D,EAAA,SAQOzL,EAAQyL,EAAA1D,GAAIpF,SAASD,KAC3BgB,EAASlC,EAASxB,EAAMQ,UATzB,yBAAAiL,EAAAvI,SAAAqI,EAAA,kBAAP,gBAAAnI,GAAA,OAAAwE,EAAAtE,MAAAC,KAAAlD,YAAA,KM2GWsH,CAKbyC,aCvIIsB,eACJ,SAAAA,EAAY1H,GAAO,IAAAC,EAAA,OAAAtD,OAAAuD,EAAA,EAAAvD,CAAA4C,KAAAmI,IACjBzH,EAAAtD,OAAAwD,EAAA,EAAAxD,CAAA4C,KAAA5C,OAAAyD,EAAA,EAAAzD,CAAA+K,GAAAzJ,KAAAsB,KAAMS,KACDrE,MAAQ,CACXiK,SAAU,GACVX,QAAS,CAAC,GAAI,IACd0C,OAAQ,CAAC,GAAG,KAGd1H,EAAKO,aAAeP,EAAKO,aAAaC,KAAlB9D,OAAA+D,EAAA,EAAA/D,QAAA+D,EAAA,EAAA/D,CAAAsD,KACpBA,EAAKU,aAAeV,EAAKU,aAAaF,KAAlB9D,OAAA+D,EAAA,EAAA/D,QAAA+D,EAAA,EAAA/D,CAAAsD,KACpBA,EAAK2H,UAAY3H,EAAK2H,UAAUnH,KAAf9D,OAAA+D,EAAA,EAAA/D,QAAA+D,EAAA,EAAA/D,CAAAsD,KACjBA,EAAK4H,aAAe5H,EAAK4H,aAAapH,KAAlB9D,OAAA+D,EAAA,EAAA/D,QAAA+D,EAAA,EAAA/D,CAAAsD,KACpBA,EAAK6H,YAAc7H,EAAK6H,YAAYrH,KAAjB9D,OAAA+D,EAAA,EAAA/D,QAAA+D,EAAA,EAAA/D,CAAAsD,KACnBA,EAAK8H,SAAW9H,EAAK8H,SAAStH,KAAd9D,OAAA+D,EAAA,EAAA/D,QAAA+D,EAAA,EAAA/D,CAAAsD,KAbCA,4EAgBNW,GACXrB,KAAKsB,SAALlE,OAAAmE,EAAA,EAAAnE,CAAA,GAAiBiE,EAAEG,OAAOC,KAAOJ,EAAEG,OAAOE,2CAI1C1B,KAAKsB,SAAS,CAAE8G,OAAM,GAAA3J,OAAArB,OAAAqL,GAAA,EAAArL,CAAM4C,KAAK5D,MAAMgM,QAAjB,CAAyB,2CAG/CpI,KAAKsB,SAAS,CAAEoE,QAAO,GAAAjH,OAAArB,OAAAqL,GAAA,EAAArL,CAAM4C,KAAK5D,MAAMsJ,SAAjB,CAA0B,4CAGtCrE,EAAGqH,GACd,IAAMhD,EAAOtI,OAAAqL,GAAA,EAAArL,CAAO4C,KAAK5D,MAAMsJ,SAC/BA,EAAQgD,GAASrH,EAAEG,OAAOE,MAC1B1B,KAAKsB,SAAS,CAAEoE,gDAENrE,EAAGqH,GACb,IAAMN,EAAMhL,OAAAqL,GAAA,EAAArL,CAAO4C,KAAK5D,MAAMgM,QAC9BA,EAAOM,GAASrH,EAAEG,OAAOE,MACzB1B,KAAKsB,SAAS,CAAE8G,gDAGL/G,GACXA,EAAES,iBACF9B,KAAKS,MAAMkI,WAAW3I,KAAK5D,OAC3B4D,KAAKS,MAAM6G,QAAQC,KAAK,sCAGjB,IAAAC,EAAAxH,KACD0F,EAAU1F,KAAK5D,MAAMsJ,QAAQC,IAAI,SAACC,EAAQgD,GAAT,OACrCxG,EAAAtD,EAAAuD,cAACoC,EAAA,SAAD,CAAUuB,IAAK4C,GACbxG,EAAAtD,EAAAuD,cAAA,SAAOI,UAAU,yBAAjB,UACAL,EAAAtD,EAAAuD,cAAA,SACEI,UAAU,cACVtF,KAAK,OACLuE,MAAOgE,EACPnD,SAAU,SAAAlB,GAAC,OAAImG,EAAKc,aAAajH,EAAGuH,SAMpCR,EAASpI,KAAK5D,MAAMgM,OAAOzC,IAAI,SAACkD,EAAOD,GAAR,OACnCxG,EAAAtD,EAAAuD,cAACoC,EAAA,SAAD,CAAUuB,IAAK4C,GACbxG,EAAAtD,EAAAuD,cAAA,SAAOI,UAAU,yBAAjB,SACAL,EAAAtD,EAAAuD,cAAA,SACEI,UAAU,cACVtF,KAAK,OACLuE,MAAO0G,EACP7F,SAAU,SAAAlB,GAAC,OAAImG,EAAKe,YAAYlH,EAAGuH,SAKzC,OAEAxG,EAAAtD,EAAAuD,cAAA,OAAKI,UAAU,OACbL,EAAAtD,EAAAuD,cAAA,QAAMI,UAAU,OAAOc,SAAUvD,KAAKoB,cACpCgB,EAAAtD,EAAAuD,cAAA,OAAKI,UAAU,aACbL,EAAAtD,EAAAuD,cAAA,OAAKI,UAAU,2BACbL,EAAAtD,EAAAuD,cAAA,OAAKI,UAAU,gBACnBL,EAAAtD,EAAAuD,cAAA,SAAOI,UAAU,wBAAwBE,QAAQ,YAAjD,YAGAP,EAAAtD,EAAAuD,cAAA,SACEI,UAAU,cACVtF,KAAK,OACLsE,KAAK,WACLC,MAAO1B,KAAK5D,MAAMiK,SAClB9D,SAAUvC,KAAKiB,eAEjBmB,EAAAtD,EAAAuD,cAAA,OAAKI,UAAU,aAAaiD,EAC5BtD,EAAAtD,EAAAuD,cAAA,OAAKI,UAAU,kBACbL,EAAAtD,EAAAuD,cAAA,UAAQI,UAAU,SAAStF,KAAK,SAAS0I,QAAS7F,KAAKqI,WAAvD,gBAIAjG,EAAAtD,EAAAuD,cAAA,OAAKI,UAAU,aAAa2F,GAC5BhG,EAAAtD,EAAAuD,cAAA,OAAKI,UAAU,kBACfL,EAAAtD,EAAAuD,cAAA,UAAQI,UAAU,SAAStF,KAAK,SAAS0I,QAAS7F,KAAKwI,UAAvD,cAIApG,EAAAtD,EAAAuD,cAAA,OAAKI,UAAU,kBACfL,EAAAtD,EAAAuD,cAAA,UAAQI,UAAU,SAAStF,KAAK,UAAhC,wBArGegH,aAmHVW,eAAWV,YAAQ,iBAAO,IAAK,CAAEuE,WPtDtB,SAAAxJ,GACtB,sBAAA2J,EAAA1L,OAAAwB,EAAA,EAAAxB,CAAAyB,EAAAC,EAAAC,KAAO,SAAAgK,EAAM5I,GAAN,IAAAzC,EAAAjB,EAAA,OAAAoC,EAAAC,EAAAO,KAAA,SAAA2J,GAAA,cAAAA,EAAAzJ,KAAAyJ,EAAAxJ,MAAA,cAAAwJ,EAAAzJ,KAAA,EAAAyJ,EAAAxJ,KAAA,EAEoBtB,EAAIQ,KAAK,OAAQ,QAASS,GAF9C,OAEOzB,EAFPsL,EAAAvJ,KAGCU,EAASI,EAAe7C,IACxByC,EHjEsB,CAC9BhD,KHPwB,iBMmEjB6L,EAAAxJ,KAAA,gBAAAwJ,EAAAzJ,KAAA,EAAAyJ,EAAAxE,GAAAwE,EAAA,SAMOvM,EAAQuM,EAAAxE,GAAIpF,SAASD,KAC3BgB,EAASlC,EAASxB,EAAMQ,UAPzB,yBAAA+L,EAAArJ,SAAAoJ,EAAA,iBAAP,gBAAAE,GAAA,OAAAH,EAAA/I,MAAAC,KAAAlD,YAAA,KOqDsBsH,CAAoC+D,KC3G9D,GAAI/H,aAAa8I,SAAU,CACzB/K,EAASiC,aAAa8I,UACtB,IACEvL,EAAMwC,SAASF,EAAekJ,IAAO/I,aAAa8I,YAClD,MAAOE,IACPzL,EAAMwC,SAASF,EAAe,KAC9BtC,EAAMwC,SAASlC,EAASmL,MAgB5B,IA+BetE,eA/BA,SAAArE,GAAK,OAElB2B,EAAAtD,EAAAuD,cAACgH,EAAA,EAAD,CAAU1L,MAAOA,GACfyE,EAAAtD,EAAAuD,cAACoC,EAAA,SAAD,KACErC,EAAAtD,EAAAuD,cAAA,0BAEAD,EAAAtD,EAAAuD,cAAA,uCACAD,EAAAtD,EAAAuD,cAACuC,GAAD,MACAxC,EAAAtD,EAAAuD,cAAA,WAEAD,EAAAtD,EAAAuD,cAAA,sCACAD,EAAAtD,EAAAuD,cAACwC,EAAD,MACAzC,EAAAtD,EAAAuD,cAAA,WAEAD,EAAAtD,EAAAuD,cAAA,6CACAD,EAAAtD,EAAAuD,cAACiH,GAAD,MACAlH,EAAAtD,EAAAuD,cAAA,WAEAD,EAAAtD,EAAAuD,cAAA,uCACAD,EAAAtD,EAAAuD,cAACkH,GAAU9I,GACX2B,EAAAtD,EAAAuD,cAAA,WAEAD,EAAAtD,EAAAuD,cAAA,sCACAD,EAAAtD,EAAAuD,cAACmH,GAAD,MACApH,EAAAtD,EAAAuD,cAAA,WACAD,EAAAtD,EAAAuD,cAAA,kDACAD,EAAAtD,EAAAuD,cAAA,eCpDSoH,GALE,SAAAhJ,GAAK,OAAI2B,EAAAtD,EAAAuD,cAAA,WACtBD,EAAAtD,EAAAuD,cAACkH,GAAU9I,GACV2B,EAAAtD,EAAAuD,cAACuC,GAAD,QCSU8E,GAZE,SAAA/K,GAAwB,IAArBnD,EAAqBmD,EAArBnD,MAIhB,OAFAmO,EAFqChL,EAAdgL,SAEfnO,EAAMoO,OAAO3F,IAGjB7B,EAAAtD,EAAAuD,cAAA,WACID,EAAAtD,EAAAuD,cAACuC,GAAD,MACAxC,EAAAtD,EAAAuD,cAACmH,GAAD,QCMGK,GAXQ,SAAAlL,GACrB,OAD8CA,EAAtBhC,gBAItByF,EAAAtD,EAAAuD,cAAA,WACED,EAAAtD,EAAAuD,cAACuC,GAAD,MACAxC,EAAAtD,EAAAuD,cAACiH,GAAD,OALyBlH,EAAAtD,EAAAuD,cAACsC,EAAA,EAAD,CAAU9B,GAAG,YCiB7BiC,eACXV,YACI,SAAAzG,GAAK,MAAK,CAACL,KAAMK,EAAML,OACtB,CAACwM,eZqDoB,SAAA5K,GAC1B,sBAAA6K,EAAA3M,OAAAwB,EAAA,EAAAxB,CAAAyB,EAAAC,EAAAC,KAAO,SAAAiL,EAAM7J,GAAN,IAAAzC,EAAAjB,EAAA,OAAAoC,EAAAC,EAAAO,KAAA,SAAA4K,GAAA,cAAAA,EAAA1K,KAAA0K,EAAAzK,MAAA,cAAAyK,EAAA1K,KAAA,EAAA0K,EAAAzK,KAAA,EAEgBtB,EAAIQ,KAAK,MAAT,SAAAD,OAAyBS,IAFzC,OAEGxB,EAFHuM,EAAAxK,KAGHU,EAASI,EAAe7C,IACxByC,EH9E0B,CAC9BhD,KHPwB,iBMgFjB8M,EAAAzK,KAAA,gBAAAyK,EAAA1K,KAAA,EAAA0K,EAAAzF,GAAAyF,EAAA,SAMIxN,EAASwN,EAAAzF,GAAIpF,SAASD,KAC7BgB,EAASlC,EAASxB,IAPf,yBAAAwN,EAAAtK,SAAAqK,EAAA,iBAAP,gBAAAE,GAAA,OAAAH,EAAAhK,MAAAC,KAAAlD,YAAA,KYxDAsH,CAde,SAAAzF,GAAA,IAAGrB,EAAHqB,EAAGrB,KAAMwM,EAATnL,EAASmL,eAAT,OAEnB1H,EAAAtD,EAAAuD,cAAA,YACID,EAAAtD,EAAAuD,cAAC8H,EAAA,EAAD,KACI/H,EAAAtD,EAAAuD,cAAC+H,EAAA,EAAD,CAAOC,OAAK,EAACnL,KAAK,IAAIoL,OAAW,SAAA7J,GAAK,OAAI2B,EAAAtD,EAAAuD,cAACkI,GAAa9J,MACxD2B,EAAAtD,EAAAuD,cAAC+H,EAAA,EAAD,CAAOC,OAAK,EAACnL,KAAK,SAASoL,OAAW,kBAAMlI,EAAAtD,EAAAuD,cAACmI,GAAD,CAAU3I,SAAS,QAAQlF,gBAAiBW,EAAKX,qBAC7FyF,EAAAtD,EAAAuD,cAAC+H,EAAA,EAAD,CAAOC,OAAK,EAACnL,KAAK,YAAYoL,OAAS,kBAAMlI,EAAAtD,EAAAuD,cAACoI,GAAD,CAAgB9N,gBAAiBW,EAAKX,qBACnFyF,EAAAtD,EAAAuD,cAAC+H,EAAA,EAAD,CAAOC,OAAK,EAACnL,KAAK,YAAYoL,OAAW,kBAAMlI,EAAAtD,EAAAuD,cAACmI,GAAD,CAAU3I,SAAS,WAAWlF,gBAAiBW,EAAKX,qBACnGyF,EAAAtD,EAAAuD,cAAC+H,EAAA,EAAD,CAAOC,OAAK,EAACnL,KAAK,aAAaoL,OAAS,SAAA7J,GAAK,OAAI2B,EAAAtD,EAAAuD,cAACqI,GAADtN,OAAAuN,OAAA,CAAUhB,QAAS,SAAA1F,GAAE,OAAI6F,EAAe7F,KAASxD,OAClG2B,EAAAtD,EAAAuD,cAAC+H,EAAA,EAAD,CAAOC,OAAK,EAACnL,KAAK,QAAQoL,OAAW,kBAAMlI,EAAAtD,EAAAuD,cAACuI,GAAD,kCCE7CC,eACJ,SAAAA,EAAYpK,GAAO,IAAAC,EAAA,OAAAtD,OAAAuD,EAAA,EAAAvD,CAAA4C,KAAA6K,IACjBnK,EAAAtD,OAAAwD,EAAA,EAAAxD,CAAA4C,KAAA5C,OAAAyD,EAAA,EAAAzD,CAAAyN,GAAAnM,KAAAsB,KAAMS,KAEDqK,OAASpK,EAAKoK,OAAO5J,KAAZ9D,OAAA+D,EAAA,EAAA/D,QAAA+D,EAAA,EAAA/D,CAAAsD,KACdA,EAAKtE,MAAQ,CACX2O,QAAQ,GALOrK,wEASjBV,KAAKsB,SAAS,CACZyJ,QAAS/K,KAAK5D,MAAM2O,0CAGf,IAAAtD,EACkBzH,KAAKS,MAAtBnD,EADDmK,EACCnK,KAAM4C,EADPuH,EACOvH,OACd,OACEkC,EAAAtD,EAAAuD,cAAC2I,GAAA,EAAD,KACE5I,EAAAtD,EAAAuD,cAAA,MAAI4B,GAAG,aAAaxB,UAAU,IAC5BL,EAAAtD,EAAAuD,cAAA,+BACAD,EAAAtD,EAAAuD,cAAA,UAAID,EAAAtD,EAAAuD,cAACO,EAAA,EAAD,CAAMH,UAAU,MAAMI,GAAG,KAAIT,EAAAtD,EAAAuD,cAAA,KAAGI,UAAU,kBAAb,QAA7B,4DAEJL,EAAAtD,EAAAuD,cAAA,MAAI4B,GAAG,aAAaxB,UAAU,IAC3BnF,EAAKX,iBACJyF,EAAAtD,EAAAuD,cAACoC,EAAA,SAAD,KACIrC,EAAAtD,EAAAuD,cAAA,UAAID,EAAAtD,EAAAuD,cAAC4I,GAAA,EAAD,KAAS7I,EAAAtD,EAAAuD,cAAC6B,EAAA,EAAD,CAAQzB,UAAU,0BAA0BoD,QAAS3F,GAArD,cAGf5C,EAAKX,iBACHyF,EAAAtD,EAAAuD,cAACoC,EAAA,SAAD,KACErC,EAAAtD,EAAAuD,cAAA,UAAID,EAAAtD,EAAAuD,cAACO,EAAA,EAAD,CAAMH,UAAU,+BAA+BI,GAAG,aAAlD,aACJT,EAAAtD,EAAAuD,cAAA,UAAID,EAAAtD,EAAAuD,cAACO,EAAA,EAAD,CAAMH,UAAU,8BAA8BI,GAAG,UAAjD,oBA/BHqI,IAAM/G,WAkDZC,eACb,SAAAzG,GAAK,MAAK,CACRL,KAAMK,EAAML,OAEd,CAAC4C,UAJYkE,CAKbyG,IC7DF,GAAGzK,aAAa8I,SAAU,CACtB/K,EAASiC,aAAa8I,UACtB,IACIvL,EAAMwC,SAASF,EAAekJ,IAAO/I,aAAa8I,YACpD,MAAOE,IACLzL,EAAMwC,SAASF,EAAe,KAC9BtC,EAAMwC,SAASlC,EAASmL,MAWhC,IAYe+B,GAZH,kBAER/I,EAAAtD,EAAAuD,cAACgH,EAAA,EAAD,CAAU1L,MAAOA,GACbyE,EAAAtD,EAAAuD,cAAC+I,EAAA,EAAD,KACIhJ,EAAAtD,EAAAuD,cAACoC,EAAA,SAAD,KACIrC,EAAAtD,EAAAuD,cAACgJ,GAAD,MACAjJ,EAAAtD,EAAAuD,cAACiJ,GAAD,iBChChBhB,iBAAOlI,EAAAtD,EAAAuD,cAACkJ,GAAD,MAASC,SAASC,eAAe,SzBavB,WACb,GAA6C,kBAAmB9P,UAAW,CAGzE,GADkB,IAAI+P,IAAIC,GAAwBtQ,OAAOC,UAC3CsQ,SAAWvQ,OAAOC,SAASsQ,OAIvC,OAGFvQ,OAAOwQ,iBAAiB,OAAQ,WAC9B,IAAMnQ,EAAK,GAAA+C,OAAMkN,GAAN,sBAEPxQ,GAiDV,SAAiCO,GAE/BoQ,MAAMpQ,GACHI,KAAK,SAAAsD,GAGkB,MAApBA,EAAS2M,SACuD,IAAhE3M,EAASb,QAAQyN,IAAI,gBAAgBC,QAAQ,cAG7CtQ,UAAUC,cAAcsQ,MAAMpQ,KAAK,SAAAC,GACjCA,EAAaoQ,aAAarQ,KAAK,WAC7BT,OAAOC,SAAS8Q,aAKpB3Q,EAAgBC,KAGnBc,MAAM,WACLF,QAAQC,IACN,mEArEA8P,CAAwB3Q,GAIxBC,UAAUC,cAAcsQ,MAAMpQ,KAAK,WACjCQ,QAAQC,IACN,+GAMJd,EAAgBC,MyBnC1B4Q","file":"static/js/main.b6523eaa.chunk.js","sourcesContent":["// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.1/8 is considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  export default function register() {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Lets check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl);\n  \n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service ' +\n                'worker. To learn more, visit https://goo.gl/SC7cgQ'\n            );\n          });\n        } else {\n          // Is not local host. Just register service worker\n          registerValidSW(swUrl);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a \"New content is\n                // available; please refresh.\" message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        if (\n          response.status === 404 ||\n          response.headers.get('content-type').indexOf('javascript') === -1\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister();\n      });\n    }\n  }","import {SET_CURRENT_USER} from '../actionTypes';\n\nconst DEFAULT_STATE = {\n    isAuthenticated: false,\n    user: {}\n}\n\nexport default (state = DEFAULT_STATE, action) => {\n    switch(action.type){\n        case SET_CURRENT_USER:\n            return {\n                isAuthenticated: !!Object.keys(action.user).length,\n                user: action.user\n            };\n\n        default:\n            return state;\n    }\n\n}","import {combineReducers} from 'redux';\nimport auth from './auth';\nimport error from './error';\nimport {polls, currentPoll} from './polls';\n\n\nexport default combineReducers({\n    error,\n    auth,\n    polls,\n    currentPoll\n});","import {ADD_ERROR, REMOVE_ERROR} from '../actionTypes';\n\nexport default (state = {message: null}, action) => {\n\n    switch(action.type) {\n        \n        case ADD_ERROR:\n            console.log(action.error);\n            return {...state, message: action.error};\n\n        case REMOVE_ERROR:\n            return {...state, message: null};\n\n        default:\n            return state;\n    }\n}","export const ADD_ERROR = 'ADD_ERROR';\nexport const REMOVE_ERROR = 'REMOVE_ERROR';\n\nexport const SET_CURRENT_USER = 'SET_CURRENT_USER';\n\nexport const SET_POLLS = 'SET_POLLS';\nexport const SET_CURRENT_POLL = 'SET_CURRENT_POLL';\n","import {SET_POLLS, SET_CURRENT_POLL} from '../actionTypes';\n\nexport const polls = (state = [], action) => {\n    switch(action.type) {\n        case SET_POLLS:\n            return action.polls;\n        \n        default:\n            return state;\n    }\n}\n\nexport const currentPoll = (state = {}, action) => {\n    switch(action.type){\n\n        case SET_CURRENT_POLL:\n            return action.poll;\n        \n        default:\n            return state;\n    }\n}","import {createStore, compose, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\n\nconst DEFAULT_STATE = {\n    error: {message: null}\n};\n\nexport const store = createStore(\n    rootReducer,\n    DEFAULT_STATE,\n    compose(applyMiddleware(thunk))\n  );\n","import {ADD_ERROR, REMOVE_ERROR} from '../actionTypes';\n\nexport const addError = error => ({\n    type: ADD_ERROR,\n    error\n});\n\nexport const removeError = () => ({\n    type: REMOVE_ERROR\n});","import axios from 'axios';\n\nconst host = 'http://localhost:4000/api';\n\nexport const setToken = token => {\n  if (token) {\n    axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n  } else {\n    delete axios.defaults.headers.common['Authorization'];\n  }\n};\n\nexport const call = async (method, path, data) => {\n  const response = await axios[method](`${host}/${path}`, data);\n  return response.data;\n};\n\nexport default { setToken, call };\n","import {addError, removeError} from './error';\nimport {SET_CURRENT_USER} from '../actionTypes';\nimport api from '../../services/api';\n\nexport const setCurrentUser = user => ({\n    type: SET_CURRENT_USER,\n    user\n});\n\nexport const setToken = token => {\n    api.setToken(token);\n};\n\nexport const logout = () => {\n    return dispatch => {\n        localStorage.clear();\n        api.setToken(null);\n        dispatch(setCurrentUser({}));\n        dispatch(removeError());\n    }\n}\n\nexport const authUser = (path, data) => {\n    return async dispatch => {\n        try {\n            const {token, ...user} = await api.call('post', `auth/${path}`, data);\n            localStorage.setItem('jwtToken', token);\n            api.setToken(token);\n            dispatch(setCurrentUser(user));\n            dispatch(removeError());\n        }catch(err) {\n            //console.log(err)\n            const error = err.response.data;\n            dispatch(addError(error.message)); \n        }\n    }\n}","import {SET_POLLS, SET_CURRENT_POLL} from '../actionTypes';\nimport {addError, removeError} from './error';\nimport api from '../../services/api';\n//import { BrowserHistory } from 'react-router';\n\nexport const setPolls = polls => ({\n    type: SET_POLLS,\n    polls\n});\n\nexport const setCurrentPoll = poll => ({\n    type: SET_CURRENT_POLL,\n    poll\n});\n\nexport const getPolls = () => {\n    return async dispatch => {\n        try {\n            const polls = await api.call('get', 'polls');\n            dispatch(setPolls(polls));\n            dispatch(removeError());\n        } catch (err) {\n            const error = err.response.data;\n            dispatch(addError(error.message));\n        }\n    }\n}\n// more like get last polls but whatever >.<\nexport const getSlicedPolls = () => {\n    return async dispatch => {\n        try {\n            const polls = await api.call('get', 'polls');\n            console.log(\"ceci est la taille de polls : \" + polls.length);\n            const slicedPolls = polls.slice((polls.length - 5),polls.length);\n            dispatch(setPolls(slicedPolls));\n            dispatch(removeError());\n        } catch (err) {\n            const error = err.response.data;\n            dispatch(addError(error.message));\n        }\n    }\n}\n\n// export const sortPolls = () => { // TODO or to remove\n//     return async dispatch => {\n//         try {\n//             const polls = await api.call('get', 'polls');\n//         }catch(err){\n//             const error = err.response.data;\n//             dispatch(addError(error.message));\n//         }\n//     }\n// }\n\nexport const getUserPolls = () => {\n    return async dispatch => {\n        try {\n            const polls = await api.call('get', 'polls/user');\n            dispatch(setPolls(polls));\n            dispatch(removeError());\n        } catch (err) {\n            const error = err.response.data;\n            dispatch(addError(error.message));\n        }\n    }\n}\n\nexport const createPoll = data => {\n    return async dispatch => {\n        try {\n            const poll = await api.call('post', 'polls', data);\n            dispatch(setCurrentPoll(poll));\n            dispatch(removeError());\n        } catch (err) {\n            const error = err.response.data;\n            dispatch(addError(error.message));\n        }\n    }\n}\n\nexport const getCurrentPoll = path => {\n    return async dispatch => {\n      try {\n        const poll = await api.call('get', `polls/${path}`);\n        dispatch(setCurrentPoll(poll));\n        dispatch(removeError());\n      } catch (err) {\n        const  error  = err.response.data;\n        dispatch(addError(error));\n      }\n    }\n  };\n\nexport const vote = (path, data) => {\n    return async dispatch => {\n        try {\n            const poll = await api.call('post', `polls/${path}`, data);\n            dispatch(setCurrentPoll(poll));\n            dispatch(removeError());\n        } catch (err) {\n            const error = err.response.data;\n            dispatch(addError(error.message));\n        }\n    }\n}\n\nexport const deletePoll = (id) => {\n    return async dispatch => {\n        try {\n            const poll = await api.call('delete', `polls/${id}`);\n            dispatch(setCurrentPoll(poll));\n            dispatch(removeError());\n            \n        } catch (err) {\n            const error = err.response.data;\n            dispatch(addError(error.message));\n        }\n    }\n}","import React, { Component, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { authUser, logout } from '../store/actions';\nimport { Card, Button, CardTitle, CardText, Container, Input, Label, Jumbotron, Row, Col, Form  } from 'reactstrap';\n\n\nclass Auth extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      username: '',\n      password: '',\n      ethAddress: '',\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n  handleChange(e) {\n    this.setState({ [e.target.name]: e.target.value });\n  }\n  handleSubmit(e) {\n    const { username, password, ethAddress, email } = this.state;\n    const { authType } = this.props;\n    e.preventDefault();\n    this.props.authUser(authType || 'login', { username, password, ethAddress, email });\n  }\n\n  componentDidMount(){\n\n  }\n\n\n  render() {\n    const { username, password, ethAddress } = this.state;\n    const { authType } = this.props;\n    let ethInput;\n    let ethLabel;\n    let cardActions;\n\n    if (authType === 'register') {\n      ethInput = <Input\n                    type=\"text\"\n                    value={ethAddress}\n                    name=\"ethAddress\"\n                    onChange={this.handleChange}\n                    autoComplete=\"off\"\n                    className=\"white-text validate\"\n                  />;\n      ethLabel= <Label className=\"form-label\" htmlFor=\"ethAddress\">\n                    ethAddress {' '}\n                </Label>;\n      cardActions = <Link className=\"\" to=\"/login\">login ?</Link>;\n    } else {\n      ethInput = null ;\n      cardActions = <Link className=\"\" to=\"/register\">register ?</Link>;\n    }\n    return (\n        \n          <Container>\n            <div className=\"section\"></div>\n            <Card body inverse style={{ backgroundColor: '#333', borderColor: '#333' }}>\n              <CardTitle>{authType}</CardTitle>\n              <Form onSubmit={this.handleSubmit}>\n              <Row>\n                <Col sm={{ size: '6', offset: 1 }} md={{ size: '6', offset: 1 }} xl={{ size: '6', offset: 1 }} xs={{ size: '6', offset: 1 }} lg={{ size: '6', offset: 1 }}>\n                      <Input id=\"username\" type=\"text\" value={username} name=\"username\" onChange={this.handleChange} autoComplete=\"off\" className=\"white-text validate\"/>\n                      <Label htmlFor=\"username\">USERNAME</Label>\n                </Col>\n                </Row>\n                <Row>\n                  <Col sm={{ size: '6', offset: 1 }}>\n                      <Input id=\"password\" type=\"password\" value={password} name=\"password\" onChange={this.handleChange} className=\" white-text validate\"/>\n                      <Label htmlFor=\"password\">PASSWORD</Label>\n                  </Col>\n                </Row>\n\n                <Col sm={{ size: '6', offset: 1 }}>\n                       { ethInput }{ ethLabel }\n                </Col>\n                <Col sm={{ size: '6', offset: 1 }}>\n                      <Button className=\"button\" type=\"submit\">\n                        Submit\n                      </Button>\n                <Link className=\"\" to=\"/poll/new\">Forgot password ?</Link> { cardActions }\n              </Col>\n        </Form>\n        \n        </Card>\n        </Container>\n    );\n  }\n}\n\nexport default connect(() => ({}), { authUser, logout })(Auth);","import React, { Fragment } from 'react';\nimport { connect } from 'react-redux';\n\nconst ErrorMessage = ({ error }) => (\n    <Fragment> { error.message && <div className=\"error\" >{error.message}</div>} </Fragment>\n);\n\nexport default connect(store => ({ error: store.error }))(ErrorMessage);","import React from 'react';\nimport { Redirect } from 'react-router-dom';\nimport Auth from '../components/Auth';\nimport ErrorMessage from '../components/ErrorMessage';\n\nconst AuthPage = ({ authType, isAuthenticated }) => {\n\n    if(isAuthenticated) return <Redirect to=\"/\" />;\n\n\n\n    return (\n        <div>\n            <ErrorMessage />\n            <Auth authType={authType} />\n        </div>\n    )\n}\n\nexport default AuthPage;","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Pie } from 'react-chartjs-2';\nimport { vote, deletePoll } from '../store/actions';\nimport { color } from '../services/color';\nimport { withRouter } from 'react-router-dom';\n\n\nconst Poll = ({ poll, vote, deletePoll }) => {\n\n  const answers =\n    poll.options &&\n    poll.options.map(option => (\n      <button\n        onClick={() => vote(poll._id, { answer: option.option })}\n        className=\"button\"\n        key={option._id}>\n        {option.option}\n      </button>\n    ));\n\n  const pollData = poll.options && {\n    labels: poll.options.map(option => option.option),\n    datasets: [\n      {\n        label: poll.question,\n        backgroundColor: poll.options.map(option => color()),\n        borderColor: '#323643',\n        data: poll.options.map(option => option.votes),\n        defaultFontColor: \"#FFFFFF\",\n      },\n    ],\n  };\n\n  const pollDataBis = async () => {\n    // TODO : appel sur l'api pour récupérer les infos du contrat \n    // au lieu de stocker dans mongo quand l'appel au noeud eth s'est bien passé..\n    // puis les display comme prévu\n  };\n\n  return (\n    <div className=\"row\">\n      <div className=\"container\">\n        <div className=\"col s6 m6\">\n          <div className=\"card blue-grey darken-1\">\n            <div className=\"card-content white-text\">\n              <span className=\"card-title\">{poll.question}</span>\n              <p>Infos from the smart contract</p>\n            </div>\n          <div className=\"card-action\">\n            <ul>\n              <li>{answers}</li>\n              <li><button className=\"button\" onClick={() => deletePoll(poll._id)}>Delete poll</button></li>\n            </ul>\n          </div>\n          </div>\n        </div>\n          <div className=\"container\">\n            <div className=\"col s6 m6\">\n              <div className=\"card blue-grey lighten-2\">\n                <div className=\"card-content\">\n                <span className=\"card-title\">Votes</span>\n                <p>Nice graphic of the votes</p>\n                  { poll.options && <Pie data={pollData} /> }\n                </div>\n              </div>\n            </div>\n          </div>\n      </div>\n    </div>\n  );\n};\n\nexport default withRouter(connect(\n  store => ({\n    poll: store.currentPoll,\n  }),\n  { vote, deletePoll },\n)(Poll));","export const color = () => {\n    return (\n      '#' +\n      Math.random()\n        .toString(16)\n        .slice(2, 8)\n    );\n  };","import React, { Component, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { getPolls, getUserPolls, getSlicedPolls } from '../store/actions';\nimport { Table, Button } from 'reactstrap';\n// Import React Table\nimport ReactTable from \"react-table\";\nimport \"react-table/react-table.css\";\n\n\nclass Polls extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n    sorted: [],\n    page: 0,\n    pageSize: 10,\n    expanded: {},\n    resized: [],\n    filtered: []};\n    this.handleSelect = this.handleSelect.bind(this);\n  }\n\n  componentDidMount() {\n    const { getSlicedPolls } = this.props;\n    getSlicedPolls();\n  }\n\n  handleSelect(id) {\n    const { history } = this.props;\n    history.push(`/polls/${id}`);\n  }\n\n  render() {  \n    const { getPolls, getUserPolls, auth, getSlicedPolls } = this.props;\n\n    const polls = this.props.polls.map((poll, i=0) => (\n\n      <Fragment key={poll._id}>\n        <tr className=\"\">\n          <td>{poll.question}</td>\n          <td> voters list inc soon </td>\n          <td> Poll status inc soon </td>\n          <td> Voted inc soon </td>\n          <td> Participation inc soon </td>\n          <td><button className=\"btn-small buttons_center z-depth-1\" onClick={() => this.handleSelect(poll._id)} ><i className=\"material-icons\">send</i></button></td>\n        </tr>\n      </Fragment>\n    ));\n    console.log();\n    return (\n\n      <Fragment>\n        \n        {auth.isAuthenticated && (\n          <div className=\"container\">\n\n          {/* <ReactTable\n            data={this.props.polls}\n            columns={[\n              {\n                Header: \"Poll App\",\n                columns: [\n                  {\n                    Header: \"User\",\n                    accessor: \"user.username\"\n                  },\n                  {\n                    Header: \"Question\",\n                    accessor: \"question\"\n                  },\n                  {\n                    Header: \"Voters\",\n                    id: \"voters\",\n                    accessor: d => d.voters\n                  }\n                ]\n              }\n            ]}\n            filterable\n            maxWidth = '160px '\n            defaultPageSize={10}\n            className=\"-striped -highlight\"\n            // Controlled props\n            sorted={this.state.sorted}\n            page={this.state.page}\n            pageSize={this.state.pageSize}\n            expanded={this.state.expanded}\n            resized={this.state.resized}\n            filtered={this.state.filtered}\n            // Callbacks\n            onSortedChange={sorted => this.setState({ sorted })}\n            onPageChange={page => this.setState({ page })}\n            onPageSizeChange={(pageSize, page) => this.setState({ page, pageSize })}\n            onExpandedChange={expanded => this.setState({ expanded })}\n            onResizedChange={resized => this.setState({ resized })}\n            onFilteredChange={filtered => this.setState({ filtered })}\n          /> */}\n          \n          <div className=\"section\"></div>\n              <div className=\"row\">\n                <Link className=\"btn-large col s2 m2 l2 offset-s2 offset-m2 offset-l3 z-depth-3\" to=\"/poll/new\">New Poll</Link>\n              </div>\n              <div className=\"section\"></div>\n            </div>\n        )}\n        <br></br>\n              {auth.isAuthenticated && (\n                <div className=\"container z-depth-4\">\n                            <Table className=\"responsive-table centered z-depth-1\">\n                              <thead>\n                                <tr>\n                                  <th> Name </th>\n                                  <th> Voters List </th>\n                                  <th> Poll Status </th>\n                                  <th> voted ? </th>\n                                  <th> Participation </th>\n                                </tr>\n                              </thead>\n                              <tbody>{polls}</tbody>\n                              \n                            </Table>\n                </div>\n              )}\n              {!auth.isAuthenticated && (\n                <ul className=\"container row\">\n                    <li><Link className=\"btn-large teal col s2 m2 l2 darken-2 z-depth-5\" to=\"/register\">Register</Link></li>\n                    <li><Link className=\"btn-large teal col s2 m2 l2 offset-s1 offset-m1 offset-l1 darken-2 z-depth-5\" to=\"/login\">Login</Link></li>\n                </ul>\n              )}\n      </Fragment>\n      \n    );\n  }\n}\n\nexport default connect(store => ({\n    auth: store.auth,\n    polls: store.polls,\n  }),\n  { getPolls, getUserPolls, getSlicedPolls },\n)(Polls);","import React, { Component, Fragment } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport { createPoll } from '../store/actions';\n\nclass CreatePoll extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      question: '',\n      options: ['', ''],\n      voters: ['',''],\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.addAnswer = this.addAnswer.bind(this);\n    this.handleAnswer = this.handleAnswer.bind(this);\n    this.handleVoter = this.handleVoter.bind(this);\n    this.addVoter = this.addVoter.bind(this);\n  }\n\n  handleChange(e) {\n    this.setState({ [e.target.name]: e.target.value });\n  }\n\n  addVoter() {\n    this.setState({ voters: [...this.state.voters, ''] });\n  }\n  addAnswer() {\n    this.setState({ options: [...this.state.options, ''] });\n  }\n\n  handleAnswer(e, index) {\n    const options = [...this.state.options];\n    options[index] = e.target.value;\n    this.setState({ options });\n  }\n  handleVoter(e, index) {\n    const voters = [...this.state.voters];\n    voters[index] = e.target.value;\n    this.setState({ voters });\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    this.props.createPoll(this.state);\n    this.props.history.push('/');\n  }\n\n  render() {\n    const options = this.state.options.map((option, i) => (\n      <Fragment key={i}>\n        <label className=\"label-info black-text\">option</label>\n        <input\n          className=\"input-field\"\n          type=\"text\"\n          value={options}\n          onChange={e => this.handleAnswer(e, i)}\n        />\n        \n      </Fragment>\n    ));\n\n    const voters = this.state.voters.map((voter, i) => (\n      <Fragment key={i}>\n        <label className=\"label-info black-text\">voter</label>\n        <input\n          className=\"input-field\"\n          type=\"text\"\n          value={voters}\n          onChange={e => this.handleVoter(e, i)}\n        />\n      </Fragment>\n    ));\n\n    return (\n      \n    <div className=\"row\">\n      <form className=\"form\" onSubmit={this.handleSubmit}>\n        <div className=\"container\">\n          <div className=\"card blue-grey darken-1\">\n            <div className=\"card-content\">\n        <label className=\"form-label black-text\" htmlFor=\"question\">\n          question\n        </label>\n        <input\n          className=\"input-field\"\n          type=\"text\"\n          name=\"question\"\n          value={this.state.question}\n          onChange={this.handleChange}\n        />\n        <div className=\"container\">{options}\n        <div className=\"buttons_center\">\n          <button className=\"button\" type=\"button\" onClick={this.addAnswer}>\n            Add options\n          </button>\n          </div>\n          <div className=\"container\">{voters}</div>\n          <div className=\"buttons_center\">\n          <button className=\"button\" type=\"button\" onClick={this.addVoter}>\n            Add Voter\n          </button>\n          </div>\n          <div className=\"buttons_center\">\n          <button className=\"button\" type=\"submit\">\n            Submit\n          </button>\n          </div>\n        </div>\n        </div>\n        </div>\n        </div>\n      </form>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(connect(() => ({}), { createPoll })(CreatePoll));","import React, { Fragment } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport decode from 'jwt-decode';\nimport { Provider } from 'react-redux';\nimport { store } from '../store';\nimport { setToken, setCurrentUser, addError } from '../store/actions';\n\nimport Auth from '../components/Auth';\nimport Poll from '../components/Poll';\nimport Polls from '../components/Polls';\nimport ErrorMessage from '../components/ErrorMessage';\nimport CreatePoll from '../components/CreatePoll';\n//import Contract from '../components/Contract';\n\nif (localStorage.jwtToken) {\n  setToken(localStorage.jwtToken);\n  try {\n    store.dispatch(setCurrentUser(decode(localStorage.jwtToken)));\n  } catch (err) {\n    store.dispatch(setCurrentUser({}));\n    store.dispatch(addError(err));\n  }\n}\n\n// const options = {\n//   contracts: [MyStringStore],\n//   web3: {\n//     fallback: {\n//       type: \"ws\",\n//       url: \"ws://127.0.0.1:8545\",\n//     },\n//   },\n// };\n\n// const drizzle = new Drizzle(options);\n\nconst UITest = props => (\n\n  <Provider store={store}>\n    <Fragment>\n      <h1>UI Test Page</h1>\n\n      <h2>Testing Error Component: </h2>\n      <ErrorMessage />\n      <hr />\n\n      <h2>Testing Auth Component: </h2>\n      <Auth />\n      <hr />\n\n      <h2>Testing Create Poll Component: </h2>\n      <CreatePoll />\n      <hr />\n\n      <h2>Testing Polls Component: </h2>\n      <Polls {...props} />\n      <hr />\n\n      <h2>Testing Poll Component: </h2>\n      <Poll />\n      <hr />\n      <h2>Testing Drizzle contract Component: </h2>\n      <hr />\n    </Fragment>\n  </Provider>\n);\n\nexport default withRouter(UITest);","import React from 'react';\nimport Polls from '../components/Polls';\nimport ErrorMessage from '../components/ErrorMessage';\n\n\nconst Homepage = props => <div>\n    <Polls {...props} />\n    {<ErrorMessage />}\n</div>\n\nexport default Homepage;","import React from 'react';\nimport Poll from '../components/Poll';\nimport ErrorMessage from '../components/ErrorMessage';\n\nconst PollPage = ({ match, getPoll }) => {\n    //const host = window.location.href;\n    getPoll(match.params.id);\n\n    return (\n        <div>\n            <ErrorMessage />\n            <Poll />\n        </div>\n    )\n}\n\nexport default PollPage;","import React from 'react';\nimport { Redirect } from 'react-router-dom';\n\nimport CreatePoll from '../components/CreatePoll';\nimport ErrorMessage from '../components/ErrorMessage';\n\nconst CreatePollPage = ({ isAuthenticated }) => {\n  if (!isAuthenticated) return <Redirect to=\"/login\" />;\n\n  return (\n    <div>\n      <ErrorMessage />\n      <CreatePoll />\n    </div>\n  );\n};\n\nexport default CreatePollPage;","import React from 'react';\nimport {Switch, Route, withRouter} from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport AuthPage from '../pages/AuthPage';\nimport TestPage from '../pages/TestPage';\nimport Homepage from '../pages/Homepage';\nimport {getCurrentPoll} from '../store/actions';\nimport PollPage from '../pages/PollPage';\nimport CreatePollPage from '../pages/CreatePollPage';\n\n\nconst RouteViews = ({ auth, getCurrentPoll }) => \n\n<main>\n    <Switch>\n        <Route exact path=\"/\" render = { props => <Homepage {...props}/> } />\n        <Route exact path=\"/login\" render = { () => <AuthPage authType=\"login\" isAuthenticated={auth.isAuthenticated}/> } />\n        <Route exact path=\"/poll/new\" render={ () => <CreatePollPage isAuthenticated={auth.isAuthenticated} /> }/>\n        <Route exact path=\"/register\" render = { () => <AuthPage authType=\"register\" isAuthenticated={auth.isAuthenticated}/> } />\n        <Route exact path='/polls/:id' render={ props => <PollPage getPoll={id => getCurrentPoll(id)} {...props} /> } />\n        <Route exact path=\"/test\" render = { () => <TestPage/>}/>\n    </Switch>\n</main>;\n\nexport default withRouter(\n    connect(\n        store => ({auth: store.auth}),\n         {getCurrentPoll}\n    )(RouteViews)\n);","import React, { Fragment } from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { logout } from '../store/actions';\nimport {\n  Collapse,\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  NavLink,\n  UncontrolledDropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem,\n  Button } from 'reactstrap';\n\n// const NavBarComposant = ({ auth, logout }) => (\n\n\n\nclass NavBar extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.toggle = this.toggle.bind(this);\n    this.state = {\n      isOpen: false\n    };\n  }\n  toggle() {\n    this.setState({\n      isOpen: !this.state.isOpen\n    });\n  }\n  render() {\n    const { auth, logout } = this.props;\n    return (\n      <Navbar>\n        <ul id=\"nav-mobile\" className=\"\">\n          <li>BLOCKCHAIN VOTING</li>\n          <li><Link className=\"btn\" to=\"/\"><i className=\"material-icons\">home</i>                                                      </Link></li>\n        </ul>\n          <ul id=\"nav-mobile\" className=\"\">\n            {auth.isAuthenticated && (\n              <Fragment>\n                  <li><NavItem><Button className=\"teal darken-2 z-depth-5\" onClick={logout}>Logout</Button></NavItem></li>\n              </Fragment>\n            )}\n              {!auth.isAuthenticated && (\n                  <Fragment>\n                    <li><Link className=\"btn teal darken-2 z-depth-5 \" to=\"/register\">Register</Link></li>\n                    <li><Link className=\"btn teal darken-2 z-depth-5\" to=\"/login\">Login</Link></li>\n                  </Fragment>\n                )}\n          </ul>  \n  \n           {/* <Fragment>\n            <div className=\"sidebar teal darken-2 z-depth-5\">\n              <ul id=\"nav-mobile\" className=\"left active\">\n                <div className=\"row\"><li><Link  className=\"btn\" to=\"/\"><i className=\"material-icons\">home</i>Home</Link></li></div>\n              </ul>\n            </div>\n          </Fragment> */}\n  \n    </Navbar>\n  \n    );\n  }\n}\n\nexport default connect(\n  store => ({\n    auth: store.auth,\n  }),\n  {logout},\n)(NavBar);","import React, { Fragment } from 'react';\nimport {Provider} from 'react-redux';\nimport {BrowserRouter} from 'react-router-dom';\nimport decode from 'jwt-decode';\n\n\n// my own middlewarez\n// import api from '../services/api';\nimport { store } from '../store/';\nimport {setCurrentUser, addError, setToken} from '../store/actions';\nimport RouteViews from './RouteViews';\nimport NavBar from './NavBar';\n\n\n\n\nif(localStorage.jwtToken) {\n    setToken(localStorage.jwtToken);\n    try {\n        store.dispatch(setCurrentUser(decode(localStorage.jwtToken)));\n    } catch (err) {\n        store.dispatch(setCurrentUser({}));\n        store.dispatch(addError(err));\n    }\n}\n\n    \n\n\n\n\n\n\nconst App = () => (\n    \n    <Provider store={store}>\n        <BrowserRouter>\n            <Fragment>\n                <NavBar/>\n                <RouteViews/>\n            </Fragment>\n     </BrowserRouter>\n    </Provider>\n);\n\nexport default App;","import React from 'react';\nimport { render } from 'react-dom';\nimport './index.css';\nimport registerServiceWorker from './registerServiceWorker';\nimport App from './containers/App';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nrender(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n\nregisterServiceWorker();\n"],"sourceRoot":""}