{"version":3,"sources":["store/reducers/auth.js","store/reducers/index.js","store/reducers/error.js","store/actionTypes.js","store/reducers/polls.js","store/index.js","store/actions/error.js","services/api.js","store/actions/auth.js","store/actions/polls.js","components/Auth.jsx","components/ErrorMessage.jsx","pages/AuthPage.jsx","components/Poll.jsx","services/color.js","components/Polls.jsx","components/CreatePoll.jsx","pages/TestPage.jsx","pages/Homepage.jsx","pages/PollPage.jsx","pages/CreatePollPage.jsx","containers/RouteViews.jsx","containers/NavBar.jsx","containers/App.jsx","registerServiceWorker.js","index.js"],"names":["DEFAULT_STATE","isAuthenticated","user","combineReducers","error","state","arguments","length","undefined","message","action","type","Object","objectSpread","auth","keys","polls","currentPoll","poll","store","createStore","rootReducer","compose","applyMiddleware","thunk","addError","api","setToken","token","axios","defaults","headers","common","concat","call","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","method","path","data","response","wrap","_context","prev","next","sent","abrupt","stop","_x","_x2","_x3","apply","this","setCurrentUser","logout","dispatch","localStorage","clear","setPolls","setCurrentPoll","Auth","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","username","password","ethAddress","handleChange","bind","assertThisInitialized","handleSubmit","e","setState","defineProperty","target","name","value","_this$state","authType","preventDefault","authUser","ethInput","ethLabel","_this$state2","react_default","createElement","onChange","autoComplete","className","htmlFor","onSubmit","Component","connect","_ref2","objectWithoutProperties","setItem","t0","react","AuthPage","Redirect","to","components_ErrorMessage","components_Auth","vote","_ref5","_callee5","_context5","_x5","deletePoll","id","_ref6","_callee6","_context6","_x6","answers","options","map","option","onClick","_id","answer","key","labels","datasets","label","question","backgroundColor","Math","random","toString","slice","borderColor","votes","react_chartjs_2_es","Polls","handleSelect","getPolls","history","push","_this2","_this$props","getUserPolls","_callee2","_context2","CreatePoll","voters","addAnswer","handleAnswer","handleVoter","addVoter","toConsumableArray","index","createPoll","i","voter","_ref3","_callee3","_context3","console","log","jwtToken","decode","err","withRouter","es","components_CreatePoll","components_Polls","components_Poll","Homepage","PollPage","match","getPoll","params","CreatePollPage","getCurrentPoll","_ref4","_callee4","_context4","_x4","Switch","Route","exact","render","pages_Homepage","pages_AuthPage","pages_CreatePollPage","pages_PollPage","assign","TestPage","Link","App","BrowserRouter","NavBar","containers_RouteViews","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","containers_App","document","getElementById","URL","process","origin","addEventListener","fetch","status","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.7874bc17.chunk.js","sourcesContent":["import {SET_CURRENT_USER} from '../actionTypes';\n\nconst DEFAULT_STATE = {\n    isAuthenticated: false,\n    user: {}\n}\n\nexport default (state = DEFAULT_STATE, action) => {\n    switch(action.type){\n        case SET_CURRENT_USER:\n            return {\n                isAuthenticated: !!Object.keys(action.user).length,\n                user: action.user\n            };\n\n        default:\n            return state;\n    }\n\n}","import {combineReducers} from 'redux';\nimport auth from './auth';\nimport error from './error';\nimport {polls, currentPoll} from './polls';\n\n\nexport default combineReducers({\n    error,\n    auth,\n    polls,\n    currentPoll\n});","import {ADD_ERROR, REMOVE_ERROR} from '../actionTypes';\n\nexport default (state = {message: null}, action) => {\n\n    switch(action.type) {\n        \n        case ADD_ERROR:\n            //console.log(action.error);\n            return {...state, message: action.error};\n\n        case REMOVE_ERROR:\n            return {...state, message: null};\n\n        default:\n            return state;\n    }\n}","export const ADD_ERROR = 'ADD_ERROR';\nexport const REMOVE_ERROR = 'REMOVE_ERROR';\n\nexport const SET_CURRENT_USER = 'SET_CURRENT_USER';\n\nexport const SET_POLLS = 'SET_POLLS';\nexport const SET_CURRENT_POLL = 'SET_CURRENT_POLL';\n","import {SET_POLLS, SET_CURRENT_POLL} from '../actionTypes';\n\nexport const polls = (state = [], action) => {\n    switch(action.type) {\n        case SET_POLLS:\n            return action.polls;\n        \n        default:\n            return state;\n    }\n}\n\nexport const currentPoll = (state = {}, action) => {\n    switch(action.type){\n\n        case SET_CURRENT_POLL:\n            return action.poll;\n        \n        default:\n            return state;\n    }\n}","import {createStore, compose, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\n\nconst DEFAULT_STATE = {\n    error: {message: null}\n};\n\nexport const store = createStore(\n    rootReducer,\n    DEFAULT_STATE,\n    compose(applyMiddleware(thunk))\n  );\n","import {ADD_ERROR, REMOVE_ERROR} from '../actionTypes';\n\nexport const addError = error => ({\n    type: ADD_ERROR,\n    error\n});\n\nexport const removeError = () => ({\n    type: REMOVE_ERROR\n});","import axios from 'axios';\n\nconst host = 'http://163.172.180.75:4000/api';\n\nexport const setToken = token => {\n  if (token) {\n    axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n  } else {\n    delete axios.defaults.headers.common['Authorization'];\n  }\n};\n\nexport const call = async (method, path, data) => {\n  const response = await axios[method](`${host}/${path}`, data);\n  return response.data;\n};\n\nexport default { setToken, call };\n","import {addError, removeError} from './error';\nimport {SET_CURRENT_USER} from '../actionTypes';\nimport api from '../../services/api';\n\nexport const setCurrentUser = user => ({\n    type: SET_CURRENT_USER,\n    user\n});\n\nexport const setToken = token => {\n    api.setToken(token);\n};\n\nexport const logout = () => {\n    return dispatch => {\n        localStorage.clear();\n        api.setToken(null);\n        dispatch(setCurrentUser({}));\n        dispatch(removeError());\n    }\n}\n\nexport const authUser = (path, data) => {\n    return async dispatch => {\n        try {\n            //console.log(path);\n            //console.log(data);\n            const {token, ...user} = await api.call('post', `auth/${path}`, data);\n            localStorage.setItem('jwtToken', token);\n            api.setToken(token);\n            dispatch(setCurrentUser(user));\n            dispatch(removeError());\n        } catch(err) {\n            //console.log(err)\n            const error = err.response.data;\n            dispatch(addError(error.message)); \n        }\n    }\n}","import {SET_POLLS, SET_CURRENT_POLL} from '../actionTypes';\nimport {addError, removeError} from './error';\nimport api from '../../services/api';\n\nexport const setPolls = polls => ({\n    type: SET_POLLS,\n    polls\n});\n\nexport const setCurrentPoll = poll => ({\n    type: SET_CURRENT_POLL,\n    poll\n});\n\nexport const getPolls = () => {\n    return async dispatch => {\n        try {\n            const polls = await api.call('get', 'polls');\n            dispatch(setPolls(polls));\n            dispatch(removeError());\n        } catch (err) {\n            const error = err.response.data;\n            dispatch(addError(error.message));\n        }\n    }\n}\n\nexport const getUserPolls = () => {\n    return async dispatch => {\n        try {\n            const polls = await api.call('get', 'polls/user');\n            dispatch(setPolls(polls));\n            dispatch(removeError());\n        } catch (err) {\n            const error = err.response.data;\n            dispatch(addError(error.message));\n        }\n    }\n}\n\nexport const createPoll = data => {\n    return async dispatch => {\n        try {\n            console.log(\"wesh c ladata :\", data);\n            const poll = await api.call('post', 'polls', data);\n            dispatch(setCurrentPoll(poll));\n            dispatch(removeError());\n        } catch (err) {\n            const error = err.response.data;\n            dispatch(addError(error.message));\n        }\n    }\n}\n\nexport const getCurrentPoll = path => {\n    return async dispatch => {\n      try {\n        const poll = await api.call('get', `polls/${path}`);\n        dispatch(setCurrentPoll(poll));\n        dispatch(removeError());\n      } catch (err) {\n        const { error } = err.response.data;\n        dispatch(addError(error));\n      }\n    };\n  };\n\nexport const vote = (path, data) => {\n    return async dispatch => {\n        try {\n            const poll = await api.call('post', `polls/${path}`, data);\n            dispatch(setCurrentPoll(poll));\n            dispatch(removeError());\n        } catch (err) {\n            const error = err.response.data;\n            dispatch(addError(error.message));\n        }\n    }\n}\n\nexport const deletePoll = id => {\n    return async dispatch => {\n        try {\n            const poll = await api.call('delete', `polls/${id}`);\n            \n            dispatch(setCurrentPoll(poll));\n            const polls = await api.call('get', 'polls');\n            dispatch(setPolls(polls));\n            dispatch(removeError());\n            \n        } catch (err) {\n            const error = err.response.data;\n            dispatch(addError(error.message));\n        }\n\n    }\n}","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { authUser, logout } from '../store/actions';\n\nclass Auth extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      username: '',\n      password: '',\n      ethAddress: '',\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n  handleChange(e) {\n    this.setState({ [e.target.name]: e.target.value });\n  }\n  handleSubmit(e) {\n    const { username, password, ethAddress } = this.state;\n    const { authType } = this.props;\n    e.preventDefault();\n    this.props.authUser(authType || 'login', { username, password, ethAddress });\n  }\n\n\n\n  render() {\n    const { username, password, ethAddress } = this.state;\n    const { authType } = this.props;\n    let ethInput;\n    let ethLabel;\n\n    if (authType === 'register') {\n      ethInput = <input\n      type=\"text\"\n      value={ethAddress}\n      name=\"ethAddress\"\n      onChange={this.handleChange}\n      autoComplete=\"off\"\n      className=\"form-input\"\n      />;\n      ethLabel= <label className=\"form-label\" htmlFor=\"ethAddress\">\n                    ethAddress (optional for login) {' '}\n              </label>;\n    } else {\n      ethInput = null ;\n    }\n    return (\n      <div>\n        <h1 className=\"poll-title\">{authType}</h1>\n        <form className=\"form\" onSubmit={this.handleSubmit}>\n          <label className=\"form-label\" htmlFor=\"username\">\n            username{' '}\n          </label>\n          <input\n            type=\"text\"\n            value={username}\n            name=\"username\"\n            onChange={this.handleChange}\n            autoComplete=\"off\"\n            className=\"form-input\"\n          />\n          <label className=\"form-label\" htmlFor=\"password\">\n            password{' '}\n          </label>\n          <input\n            type=\"password\"\n            value={password}\n            name=\"password\"\n            onChange={this.handleChange}\n            autoComplete=\"off\"\n            className=\"form-input\"\n          />\n          { ethLabel } { ethInput }\n          <div className=\"buttons_center\">\n            <button className=\"button\" type=\"submit\">\n              Submit\n            </button>\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default connect(() => ({}), { authUser, logout })(Auth);","import React, { Fragment } from 'react';\nimport { connect } from 'react-redux';\n\nconst ErrorMessage = ({ error }) => (\n    <Fragment> { error.message && <div className=\"error\" >{error.message}</div>} </Fragment>\n);\n\nexport default connect(store => ({ error: store.error }))(ErrorMessage);","import React from 'react';\nimport { Redirect } from 'react-router-dom';\nimport Auth from '../components/Auth';\nimport ErrorMessage from '../components/ErrorMessage';\n\nconst AuthPage = ({ authType, isAuthenticated }) => {\n\n    if(isAuthenticated) return <Redirect to=\"/\" />;\n\n\n\n    return (\n        <div>\n            <ErrorMessage />\n            <Auth authType={authType} />\n        </div>\n    )\n}\n\nexport default AuthPage;","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Pie } from 'react-chartjs-2';\nimport { vote, deletePoll } from '../store/actions';\nimport { color } from '../services/color';\n\n\nconst Poll = ({ poll, vote, deletePoll }) => {\n\n  const answers =\n    poll.options &&\n    poll.options.map(option => (\n      <button\n        onClick={() => vote(poll._id, { answer: option.option })}\n        className=\"button\"\n        key={option._id}>\n        {option.option}\n      </button>\n    ));\n\n  const data = poll.options && {\n    labels: poll.options.map(option => option.option),\n    datasets: [\n      {\n        label: poll.question,\n        backgroundColor: poll.options.map(option => color()),\n        borderColor: '#323643',\n        data: poll.options.map(option => option.votes),\n      },\n    ],\n  };\n\n  \n\n  return (\n    <div>\n      <div className=\"pie\">\n      <h3 className=\"poll-title\">{poll.question}</h3>\n      <div className=\"buttons_center\">{answers}</div>\n        { poll.options && <Pie data={data} /> }\n      </div>\n      <button className=\"button\" onClick={() => deletePoll(poll._id)}>Delete poll</button>\n    </div>\n  );\n};\n\nexport default connect(\n  store => ({\n    poll: store.currentPoll,\n  }),\n  { vote, deletePoll },\n)(Poll);","export const color = () => {\n    return (\n      '#' +\n      Math.random()\n        .toString(16)\n        .slice(2, 8)\n    );\n  };","import React, { Component, Fragment } from 'react';\nimport { connect } from 'react-redux';\n\nimport { getPolls, getUserPolls } from '../store/actions';\n\nclass Polls extends Component {\n  constructor(props) {\n    super(props);\n    this.handleSelect = this.handleSelect.bind(this);\n  }\n  componentDidMount() {\n    const { getPolls } = this.props;\n    getPolls();\n  }\n\n  handleSelect(id) {\n    const { history } = this.props;\n    history.push(`/polls/${id}`);\n  }\n\n  render() {\n    const { getPolls, getUserPolls, auth } = this.props;\n\n    const polls = this.props.polls.map(poll => (\n      <li onClick={() => this.handleSelect(poll._id)} key={poll._id}>\n        {poll.question}\n      </li>\n    ));\n\n    return (\n      <Fragment>\n        {auth.isAuthenticated && (\n          <div className=\"buttons_center\">\n            <button className=\"button\" onClick={getPolls}>\n              All polls\n            </button>\n            <button className=\"button\" onClick={getUserPolls}>\n              My polls\n            </button>\n          </div>\n        )}\n        <div className=\"form\">\n            <ul className=\"polls\">{polls}</ul>\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nexport default connect(store => ({\n    auth: store.auth,\n    polls: store.polls,\n  }),\n  { getPolls, getUserPolls },\n)(Polls);","import React, { Component, Fragment } from 'react';\nimport { connect } from 'react-redux';\n\nimport { createPoll } from '../store/actions';\n\nclass CreatePoll extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      question: '',\n      options: ['', ''],\n      voters: ['',''],\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.addAnswer = this.addAnswer.bind(this);\n    this.handleAnswer = this.handleAnswer.bind(this);\n    this.handleVoter = this.handleVoter.bind(this);\n    this.addVoter = this.addVoter.bind(this);\n  }\n\n  handleChange(e) {\n    this.setState({ [e.target.name]: e.target.value });\n  }\n\n  addVoter() {\n    this.setState({ voters: [...this.state.voters, ''] });\n  }\n  addAnswer() {\n    this.setState({ options: [...this.state.options, ''] });\n  }\n\n  handleAnswer(e, index) {\n    const options = [...this.state.options];\n    options[index] = e.target.value;\n    this.setState({ options });\n  }\n  handleVoter(e, index) {\n    const voters = [...this.state.voters];\n    voters[index] = e.target.value;\n    this.setState({ voters });\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    //console.log(this.state);\n    this.props.createPoll(this.state);\n  }\n\n  render() {\n    const options = this.state.options.map((option, i) => (\n      <Fragment key={i}>\n        <label className=\"form-label\">option</label>\n        <input\n          className=\"form-input\"\n          type=\"text\"\n          value={options}\n          onChange={e => this.handleAnswer(e, i)}\n        />\n      </Fragment>\n    ));\n\n    const voters = this.state.voters.map((voter, i) => (\n      <Fragment key={i}>\n        <label className=\"form-label\">voter</label>\n        <input\n          className=\"form-input\"\n          type=\"text\"\n          value={voters}\n          onChange={e => this.handleVoter(e, i)}\n        />\n      </Fragment>\n    ));\n\n    return (\n      <form className=\"form\" onSubmit={this.handleSubmit}>\n        <label className=\"form-label\" htmlFor=\"question\">\n          question\n        </label>\n        <input\n          className=\"form-input\"\n          type=\"text\"\n          name=\"question\"\n          value={this.state.question}\n          onChange={this.handleChange}\n        />\n        <div className=\"container\">{options}\n        <div className=\"buttons_center\">\n          <button className=\"button\" type=\"button\" onClick={this.addAnswer}>\n            Add options\n          </button>\n          </div>\n          <div className=\"container\">{voters}</div>\n          <div className=\"buttons_center\">\n          <button className=\"button\" type=\"button\" onClick={this.addVoter}>\n            Add Voter\n          </button>\n          </div>\n          <div className=\"buttons_center\">\n          <button className=\"button\" type=\"submit\">\n            Submit\n          </button>\n          </div>\n        </div>\n      </form>\n    );\n  }\n}\n\nexport default connect(() => ({}), { createPoll })(CreatePoll);","import React, { Fragment } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport decode from 'jwt-decode';\nimport { Provider } from 'react-redux';\nimport { store } from '../store';\nimport { setToken, setCurrentUser, addError } from '../store/actions';\n\nimport Auth from '../components/Auth';\nimport Poll from '../components/Poll';\nimport Polls from '../components/Polls';\nimport ErrorMessage from '../components/ErrorMessage';\nimport CreatePoll from '../components/CreatePoll';\n//import Contract from '../components/Contract';\n\nif (localStorage.jwtToken) {\n  setToken(localStorage.jwtToken);\n  try {\n    store.dispatch(setCurrentUser(decode(localStorage.jwtToken)));\n  } catch (err) {\n    store.dispatch(setCurrentUser({}));\n    store.dispatch(addError(err));\n  }\n}\n\n// const options = {\n//   contracts: [MyStringStore],\n//   web3: {\n//     fallback: {\n//       type: \"ws\",\n//       url: \"ws://127.0.0.1:8545\",\n//     },\n//   },\n// };\n\n// const drizzle = new Drizzle(options);\n\nconst UITest = props => (\n\n  <Provider store={store}>\n    <Fragment>\n      <h1>UI Test Page</h1>\n\n      <h2>Testing Error Component: </h2>\n      <ErrorMessage />\n      <hr />\n\n      <h2>Testing Auth Component: </h2>\n      <Auth />\n      <hr />\n\n      <h2>Testing Create Poll Component: </h2>\n      <CreatePoll />\n      <hr />\n\n      <h2>Testing Polls Component: </h2>\n      <Polls {...props} />\n      <hr />\n\n      <h2>Testing Poll Component: </h2>\n      <Poll />\n      <hr />\n      <h2>Testing Drizzle contract Component: </h2>\n      <hr />\n    </Fragment>\n  </Provider>\n);\n\nexport default withRouter(UITest);","import React from 'react';\nimport Polls from '../components/Polls';\nimport ErrorMessage from '../components/ErrorMessage';\n\n\nconst Homepage = props => <div>\n    <Polls {...props} />\n    <ErrorMessage />\n</div>\n\nexport default Homepage;","import React from 'react';\nimport Poll from '../components/Poll';\nimport ErrorMessage from '../components/ErrorMessage';\n\nconst PollPage = ({ match, getPoll }) => {\n    //const host = window.location.href;\n    getPoll(match.params.id);\n\n    return (\n        <div>\n            <ErrorMessage />\n            <Poll />\n        </div>\n    )\n}\n\nexport default PollPage;","import React from 'react';\nimport { Redirect } from 'react-router-dom';\n\nimport CreatePoll from '../components/CreatePoll';\nimport ErrorMessage from '../components/ErrorMessage';\n\nconst CreatePollPage = ({ isAuthenticated }) => {\n  if (!isAuthenticated) return <Redirect to=\"/login\" />;\n\n  return (\n    <div>\n      <ErrorMessage />\n      <CreatePoll />\n    </div>\n  );\n};\n\nexport default CreatePollPage;","import React from 'react';\nimport {Switch, Route, withRouter} from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport AuthPage from '../pages/AuthPage';\nimport TestPage from '../pages/TestPage';\nimport Homepage from '../pages/Homepage';\nimport {getCurrentPoll} from '../store/actions';\nimport PollPage from '../pages/PollPage';\nimport CreatePollPage from '../pages/CreatePollPage';\n\n\nconst RouteViews = ({ auth, getCurrentPoll }) => \n\n<main>\n    <Switch>\n        <Route exact path=\"/\" render = { props => <Homepage {...props}/> } />\n        <Route exact path=\"/login\" render = { () => <AuthPage authType=\"login\" isAuthenticated={auth.isAuthenticated}/> } />\n        <Route exact path=\"/poll/new\" render={ () => <CreatePollPage isAuthenticated={auth.isAuthenticated} /> }\n        />\n        <Route exact path=\"/register\" render = { () => <AuthPage authType=\"register\" isAuthenticated={auth.isAuthenticated}/> } />\n        <Route exact path='/polls/:id' render={ props => <PollPage getPoll={id => getCurrentPoll(id)} {...props} /> } />\n        <Route exact path=\"/test\" render = { () => <TestPage/>}/>\n    </Switch>\n</main>;\n\nexport default withRouter(\n    connect(\n        store => ({auth: store.auth}),\n         {getCurrentPoll}\n    )(RouteViews)\n);","import React, { Fragment } from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport { logout } from '../store/actions';\n\nconst Navbar = ({ auth, logout }) => (\n  <nav className=\"navbar\">\n    <div className=\"container\">\n      <ul className=\"navbar-container\">\n        <li>\n          <Link className=\"navbar-brand\" to=\"/\">\n            Poll app\n          </Link>\n        </li>\n        {!auth.isAuthenticated && (\n          <Fragment>\n            <li>\n                <Link className=\"button\" to=\"/register\">\n                  Register\n                </Link>\n            </li>\n            <li>\n              <Link className=\"navbar-item\" to=\"/login\">\n                Login\n              </Link>\n            </li>\n          </Fragment>\n        )}\n        {auth.isAuthenticated && (\n          <Fragment>\n            <li>\n              <Link className=\"navbar-item\" to=\"/poll/new\">\n                New Poll\n              </Link>\n            </li>\n            <li>\n              <a className=\"navbar-item\" onClick={logout}>\n                Logout\n              </a>\n            </li>\n          </Fragment>\n        )}\n      </ul>\n      {auth.isAuthenticated && (\n        <p className=\"navbar-user\">Logged in as {auth.user.username}</p>\n      )}\n    </div>\n  </nav>\n);\n\nexport default connect(\n  store => ({\n    auth: store.auth,\n  }),\n  { logout },\n)(Navbar);","import React, { Fragment } from 'react';\nimport {Provider} from 'react-redux';\nimport {BrowserRouter as Router} from 'react-router-dom';\nimport decode from 'jwt-decode';\n\n\n// my own middlewarez\n// import api from '../services/api';\nimport { store } from '../store/';\nimport {setCurrentUser, addError, setToken} from '../store/actions';\nimport RouteViews from './RouteViews';\nimport NavBar from './NavBar';\n\n\n\n\nif(localStorage.jwtToken) {\n    setToken(localStorage.jwtToken);\n    try {\n        store.dispatch(setCurrentUser(decode(localStorage.jwtToken)));\n    } catch (err) {\n        store.dispatch(setCurrentUser({}));\n        store.dispatch(addError(err));\n    }\n}\n\n    \n\n\n\n\n\n\nconst App = () => (\n    \n    <Provider store={store}>\n        <Router>\n            <Fragment>\n                <NavBar/>\n                <RouteViews/>\n            </Fragment>\n     </Router>\n    </Provider>\n);\n\nexport default App;","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.1/8 is considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  export default function register() {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Lets check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl);\n  \n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service ' +\n                'worker. To learn more, visit https://goo.gl/SC7cgQ'\n            );\n          });\n        } else {\n          // Is not local host. Just register service worker\n          registerValidSW(swUrl);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a \"New content is\n                // available; please refresh.\" message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        if (\n          response.status === 404 ||\n          response.headers.get('content-type').indexOf('javascript') === -1\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister();\n      });\n    }\n  }","import React from 'react';\nimport { render } from 'react-dom';\n\n\nimport './index.css';\nimport App from './containers/App';\nimport registerServiceWorker from './registerServiceWorker';\n\nrender(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nregisterServiceWorker();\n"],"sourceRoot":""}